{"ast":null,"code":"/*\n    Feature class for features that fire (or don't) on combinations of context\n    and class\n    Copyright (C) 2017 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n'use strict';\n\nvar Element = require('./Element');\n\nfunction Feature(f, name, parameters) {\n  this.evaluate = f;\n  this.name = name;\n  this.parameters = parameters;\n  var tmp = '';\n  parameters.forEach(function (par) {\n    tmp += par + '|';\n  });\n  this.parametersKey = tmp.substr(0, tmp.length - 1);\n}\n\nFeature.prototype.apply = function (x) {\n  return this.evaluate(x);\n};\n\nFeature.prototype.expectationApprox = function (p, sample) {\n  var that = this;\n  var sum = 0;\n  var seen = {};\n  var A = sample.getClasses();\n  sample.elements.forEach(function (sampleElement) {\n    var bi = sampleElement.b;\n\n    if (!seen[bi.toString()]) {\n      seen[bi.toString()] = true;\n      A.forEach(function (a) {\n        var x = new Element(a, bi);\n        sum += sample.observedProbabilityOfContext(bi) * p.calculateAPosteriori(x) * that.apply(x);\n      });\n    }\n  });\n  return sum;\n}; // Diect calculation of expected value of this feature according to distribution p\n// In real-life applications with a lot of features this is not tractable\n\n\nFeature.prototype.expectation = function (p, A, B) {\n  var sum = 0;\n  var that = this;\n  A.forEach(function (a) {\n    B.forEach(function (b) {\n      var x = new Element(a, b);\n      sum += p.calculateAPriori(x) * that.apply(x);\n    });\n  });\n  return sum;\n}; // Observed expectation of this feature in the sample\n\n\nFeature.prototype.observedExpectation = function (sample) {\n  if (this.observedExpect) {\n    return this.observedExpect;\n  }\n\n  var N = sample.size();\n  var sum = 0;\n  var that = this;\n  sample.elements.forEach(function (x) {\n    sum += that.apply(x);\n  });\n  this.observedExpect = sum / N;\n  return this.observedExpect;\n};\n\nmodule.exports = Feature;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/classifiers/maxent/Feature.js"],"names":["Element","require","Feature","f","name","parameters","evaluate","tmp","forEach","par","parametersKey","substr","length","prototype","apply","x","expectationApprox","p","sample","that","sum","seen","A","getClasses","elements","sampleElement","bi","b","toString","a","observedProbabilityOfContext","calculateAPosteriori","expectation","B","calculateAPriori","observedExpectation","observedExpect","N","size","module","exports"],"mappings":"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","sourcesContent":["/*\n    Feature class for features that fire (or don't) on combinations of context\n    and class\n    Copyright (C) 2017 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict'\n\nconst Element = require('./Element')\n\nfunction Feature (f, name, parameters) {\n  this.evaluate = f\n  this.name = name\n  this.parameters = parameters\n\n  let tmp = ''\n  parameters.forEach(function (par) {\n    tmp += par + '|'\n  })\n  this.parametersKey = tmp.substr(0, tmp.length - 1)\n}\n\nFeature.prototype.apply = function (x) {\n  return this.evaluate(x)\n}\n\nFeature.prototype.expectationApprox = function (p, sample) {\n  const that = this\n  let sum = 0\n  const seen = {}\n  const A = sample.getClasses()\n  sample.elements.forEach(function (sampleElement) {\n    const bi = sampleElement.b\n\n    if (!seen[bi.toString()]) {\n      seen[bi.toString()] = true\n\n      A.forEach(function (a) {\n        const x = new Element(a, bi)\n        sum += sample.observedProbabilityOfContext(bi) * p.calculateAPosteriori(x) * that.apply(x)\n      })\n    }\n  })\n  return sum\n}\n\n// Diect calculation of expected value of this feature according to distribution p\n// In real-life applications with a lot of features this is not tractable\nFeature.prototype.expectation = function (p, A, B) {\n  let sum = 0\n  const that = this\n  A.forEach(function (a) {\n    B.forEach(function (b) {\n      const x = new Element(a, b)\n      sum += (p.calculateAPriori(x) * that.apply(x))\n    })\n  })\n  return sum\n}\n\n// Observed expectation of this feature in the sample\nFeature.prototype.observedExpectation = function (sample) {\n  if (this.observedExpect) {\n    return this.observedExpect\n  }\n  const N = sample.size()\n  let sum = 0\n  const that = this\n  sample.elements.forEach(function (x) {\n    sum += that.apply(x)\n  })\n  this.observedExpect = sum / N\n  return this.observedExpect\n}\n\nmodule.exports = Feature\n"]},"metadata":{},"sourceType":"script"}