{"ast":null,"code":"/*\nCopyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n// a list of commonly used words that have little meaning and can be excluded\n// from analysis.\nvar Removal = require('./removal');\n\nfunction SuffixRules() {\n  var SuffixRules = this;\n  this.removal = undefined;\n  this.currentWord = undefined;\n\n  function createResultObject(result, word, type) {\n    if (result !== word) {\n      var removedPart = word.replace(result, '');\n      var removal = new Removal(word, result, removedPart, type);\n      this.removal = removal;\n    } else {\n      this.removal = undefined;\n    }\n\n    this.currentWord = result;\n    return this;\n  }\n\n  SuffixRules.RemoveInflectionalParticle = function (word) {\n    var result = word.replace(/-*(lah|kah|tah|pun)$/, '');\n    return createResultObject(result, word, 'P');\n  };\n\n  SuffixRules.RemoveInflectionalPossessivePronoun = function (word) {\n    var result = word.replace(/-*(ku|mu|nya)$/, '');\n    return createResultObject(result, word, 'PP');\n  };\n\n  SuffixRules.RemoveDerivationalSuffix = function (word) {\n    var result = word.replace(/(is|isme|isasi|i|kan|an)$/, '');\n    return createResultObject(result, word, 'DS');\n  };\n}\n\nmodule.exports = SuffixRules; // Initalize suffix rules array\n\nvar rules = [];\nvar sr = new SuffixRules();\nrules.push(sr.RemoveInflectionalParticle);\nrules.push(sr.RemoveInflectionalPossessivePronoun);\nrules.push(sr.RemoveDerivationalSuffix);\nSuffixRules.rules = rules;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/stemmers/indonesian/suffix_rules.js"],"names":["Removal","require","SuffixRules","removal","undefined","currentWord","createResultObject","result","word","type","removedPart","replace","RemoveInflectionalParticle","RemoveInflectionalPossessivePronoun","RemoveDerivationalSuffix","module","exports","rules","sr","push"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,IAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AAEA,SAASC,WAAT,GAAwB;AACtB,MAAMA,WAAW,GAAG,IAApB;AAEA,OAAKC,OAAL,GAAeC,SAAf;AACA,OAAKC,WAAL,GAAmBD,SAAnB;;AAEA,WAASE,kBAAT,CAA6BC,MAA7B,EAAqCC,IAArC,EAA2CC,IAA3C,EAAiD;AAC/C,QAAIF,MAAM,KAAKC,IAAf,EAAqB;AACnB,UAAME,WAAW,GAAGF,IAAI,CAACG,OAAL,CAAaJ,MAAb,EAAqB,EAArB,CAApB;AAEA,UAAMJ,OAAO,GAAG,IAAIH,OAAJ,CAAYQ,IAAZ,EAAkBD,MAAlB,EAA0BG,WAA1B,EAAuCD,IAAvC,CAAhB;AAEA,WAAKN,OAAL,GAAeA,OAAf;AACD,KAND,MAMO;AACL,WAAKA,OAAL,GAAeC,SAAf;AACD;;AACD,SAAKC,WAAL,GAAmBE,MAAnB;AACA,WAAO,IAAP;AACD;;AAEDL,EAAAA,WAAW,CAACU,0BAAZ,GAAyC,UAAUJ,IAAV,EAAgB;AACvD,QAAMD,MAAM,GAAGC,IAAI,CAACG,OAAL,CAAa,sBAAb,EAAqC,EAArC,CAAf;AACA,WAAOL,kBAAkB,CAACC,MAAD,EAASC,IAAT,EAAe,GAAf,CAAzB;AACD,GAHD;;AAKAN,EAAAA,WAAW,CAACW,mCAAZ,GAAkD,UAAUL,IAAV,EAAgB;AAChE,QAAMD,MAAM,GAAGC,IAAI,CAACG,OAAL,CAAa,gBAAb,EAA+B,EAA/B,CAAf;AACA,WAAOL,kBAAkB,CAACC,MAAD,EAASC,IAAT,EAAe,IAAf,CAAzB;AACD,GAHD;;AAKAN,EAAAA,WAAW,CAACY,wBAAZ,GAAuC,UAAUN,IAAV,EAAgB;AACrD,QAAMD,MAAM,GAAGC,IAAI,CAACG,OAAL,CAAa,2BAAb,EAA0C,EAA1C,CAAf;AACA,WAAOL,kBAAkB,CAACC,MAAD,EAASC,IAAT,EAAe,IAAf,CAAzB;AACD,GAHD;AAID;;AAEDO,MAAM,CAACC,OAAP,GAAiBd,WAAjB,C,CAEA;;AACA,IAAMe,KAAK,GAAG,EAAd;AACA,IAAMC,EAAE,GAAG,IAAIhB,WAAJ,EAAX;AAEAe,KAAK,CAACE,IAAN,CAAWD,EAAE,CAACN,0BAAd;AACAK,KAAK,CAACE,IAAN,CAAWD,EAAE,CAACL,mCAAd;AACAI,KAAK,CAACE,IAAN,CAAWD,EAAE,CAACJ,wBAAd;AAEAZ,WAAW,CAACe,KAAZ,GAAoBA,KAApB","sourcesContent":["/*\nCopyright (c) 2017, Alif Bhaskoro, Andy Librian, R. Kukuh (Reimplemented from https://github.com/sastrawi/sastrawi)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n// a list of commonly used words that have little meaning and can be excluded\n// from analysis.\n\nconst Removal = require('./removal')\n\nfunction SuffixRules () {\n  const SuffixRules = this\n\n  this.removal = undefined\n  this.currentWord = undefined\n\n  function createResultObject (result, word, type) {\n    if (result !== word) {\n      const removedPart = word.replace(result, '')\n\n      const removal = new Removal(word, result, removedPart, type)\n\n      this.removal = removal\n    } else {\n      this.removal = undefined\n    }\n    this.currentWord = result\n    return this\n  }\n\n  SuffixRules.RemoveInflectionalParticle = function (word) {\n    const result = word.replace(/-*(lah|kah|tah|pun)$/, '')\n    return createResultObject(result, word, 'P')\n  }\n\n  SuffixRules.RemoveInflectionalPossessivePronoun = function (word) {\n    const result = word.replace(/-*(ku|mu|nya)$/, '')\n    return createResultObject(result, word, 'PP')\n  }\n\n  SuffixRules.RemoveDerivationalSuffix = function (word) {\n    const result = word.replace(/(is|isme|isasi|i|kan|an)$/, '')\n    return createResultObject(result, word, 'DS')\n  }\n}\n\nmodule.exports = SuffixRules\n\n// Initalize suffix rules array\nconst rules = []\nconst sr = new SuffixRules()\n\nrules.push(sr.RemoveInflectionalParticle)\nrules.push(sr.RemoveInflectionalPossessivePronoun)\nrules.push(sr.RemoveDerivationalSuffix)\n\nSuffixRules.rules = rules\n"]},"metadata":{},"sourceType":"script"}