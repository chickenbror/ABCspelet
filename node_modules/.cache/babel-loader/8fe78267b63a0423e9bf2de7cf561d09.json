{"ast":null,"code":"/*\nCopyright (c) 2012, Sid Nallu, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n/*\n * contribution by sidred123\n */\n\n/*\n * Compute the Levenshtein distance between two strings.\n * Algorithm based from Speech and Language Processing - Daniel Jurafsky and James H. Martin.\n */\n\nvar _ = require('underscore'); // Walk the path back from the matchEnd to the beginning of the match.\n// Do this by traversing the distanceMatrix as you would a linked list,\n// following going from cell child to parent until reach row 0.\n\n\nfunction _getMatchStart(distanceMatrix, matchEnd, sourceLength) {\n  var row = sourceLength;\n  var column = matchEnd;\n  var tmpRow;\n  var tmpColumn; // match will be empty string\n\n  if (matchEnd === 0) {\n    return 0;\n  }\n\n  while (row > 1 && column > 1) {\n    tmpRow = row;\n    tmpColumn = column;\n    row = distanceMatrix[tmpRow][tmpColumn].parentCell.row;\n    column = distanceMatrix[tmpRow][tmpColumn].parentCell.column;\n  }\n\n  return column - 1;\n}\n\nfunction getMinCostSubstring(distanceMatrix, source, target) {\n  var sourceLength = source.length;\n  var targetLength = target.length;\n  var minDistance = sourceLength + targetLength;\n  var matchEnd = targetLength; // Find minimum value in last row of the cost matrix. This cell marks the\n  // end of the match string.\n\n  for (var column = 0; column <= targetLength; column++) {\n    if (minDistance > distanceMatrix[sourceLength][column].cost) {\n      minDistance = distanceMatrix[sourceLength][column].cost;\n      matchEnd = column;\n    }\n  }\n\n  var matchStart = _getMatchStart(distanceMatrix, matchEnd, sourceLength);\n\n  return {\n    substring: target.slice(matchStart, matchEnd),\n    distance: minDistance,\n    offset: matchStart\n  };\n}\n/*\n* Returns the Damerau-Levenshtein distance between strings. Counts the distance\n* between two strings by returning the number of edit operations required to\n* convert `source` into `target`.\n*\n* Valid edit operations are:\n*  - transposition, insertion, deletion, and substitution\n*\n* Options:\n*  insertion_cost: (default: 1)\n*  deletion_cost: number (default: 1)\n*  substitution_cost: number (default: 1)\n*  transposition_cost: number (default: 1)\n*  search: boolean (default: false)\n*  restricted: boolean (default: false)\n*/\n\n\nfunction DamerauLevenshteinDistance(source, target, options) {\n  var damLevOptions = _.extend({\n    transposition_cost: 1,\n    restricted: false\n  }, options || {}, {\n    damerau: true\n  });\n\n  return levenshteinDistance(source, target, damLevOptions);\n}\n\nfunction LevenshteinDistance(source, target, options) {\n  var levOptions = _.extend({}, options || {}, {\n    damerau: false\n  });\n\n  return levenshteinDistance(source, target, levOptions);\n}\n\nfunction levenshteinDistance(source, target, options) {\n  if (isNaN(options.insertion_cost)) options.insertion_cost = 1;\n  if (isNaN(options.deletion_cost)) options.deletion_cost = 1;\n  if (isNaN(options.substitution_cost)) options.substitution_cost = 1;\n  if (typeof options.search !== 'boolean') options.search = false;\n  var isUnrestrictedDamerau = options.damerau && !options.restricted;\n  var isRestrictedDamerau = options.damerau && options.restricted;\n  var lastRowMap = null;\n\n  if (isUnrestrictedDamerau) {\n    lastRowMap = {};\n  }\n\n  var sourceLength = source.length;\n  var targetLength = target.length;\n  var distanceMatrix = [[{\n    cost: 0\n  }]]; // the root, has no parent cell\n\n  for (var row = 1; row <= sourceLength; row++) {\n    distanceMatrix[row] = [];\n    distanceMatrix[row][0] = {\n      cost: distanceMatrix[row - 1][0].cost + options.deletion_cost,\n      parentCell: {\n        row: row - 1,\n        column: 0\n      }\n    };\n  }\n\n  for (var column = 1; column <= targetLength; column++) {\n    if (options.search) {\n      distanceMatrix[0][column] = {\n        cost: 0\n      };\n    } else {\n      distanceMatrix[0][column] = {\n        cost: distanceMatrix[0][column - 1].cost + options.insertion_cost,\n        parentCell: {\n          row: 0,\n          column: column - 1\n        }\n      };\n    }\n  }\n\n  var lastColMatch = null;\n\n  for (var _row = 1; _row <= sourceLength; _row++) {\n    if (isUnrestrictedDamerau) {\n      lastColMatch = null;\n    }\n\n    for (var _column = 1; _column <= targetLength; _column++) {\n      var costToInsert = distanceMatrix[_row][_column - 1].cost + options.insertion_cost;\n      var costToDelete = distanceMatrix[_row - 1][_column].cost + options.deletion_cost;\n      var sourceElement = source[_row - 1];\n      var targetElement = target[_column - 1];\n      var costToSubstitute = distanceMatrix[_row - 1][_column - 1].cost;\n\n      if (sourceElement !== targetElement) {\n        costToSubstitute = costToSubstitute + options.substitution_cost;\n      }\n\n      var possibleParents = [{\n        cost: costToInsert,\n        coordinates: {\n          row: _row,\n          column: _column - 1\n        }\n      }, {\n        cost: costToDelete,\n        coordinates: {\n          row: _row - 1,\n          column: _column\n        }\n      }, {\n        cost: costToSubstitute,\n        coordinates: {\n          row: _row - 1,\n          column: _column - 1\n        }\n      }]; // We can add damerau to the possibleParents if the current\n      // target-letter has been encountered in our lastRowMap,\n      // and if there exists a previous column in this row where the\n      // row & column letters matched\n\n      var canDamerau = isUnrestrictedDamerau && _row > 1 && _column > 1 && lastColMatch && targetElement in lastRowMap;\n      var costBeforeTransposition = null;\n\n      if (canDamerau) {\n        var lastRowMatch = lastRowMap[targetElement];\n        costBeforeTransposition = distanceMatrix[lastRowMatch - 1][lastColMatch - 1].cost;\n        var costToTranspose = costBeforeTransposition + (_row - lastRowMatch - 1) * options.deletion_cost + (_column - lastColMatch - 1) * options.insertion_cost + options.transposition_cost;\n        possibleParents.push({\n          cost: costToTranspose,\n          coordinates: {\n            row: lastRowMatch - 1,\n            column: lastColMatch - 1\n          }\n        });\n      } // Source and target chars are 1-indexed in the distanceMatrix so previous\n      // source/target element is (col/row - 2)\n\n\n      var canDoRestrictedDamerau = isRestrictedDamerau && _row > 1 && _column > 1 && sourceElement === target[_column - 2] && source[_row - 2] === targetElement;\n\n      if (canDoRestrictedDamerau) {\n        costBeforeTransposition = distanceMatrix[_row - 2][_column - 2].cost;\n        possibleParents.push({\n          cost: costBeforeTransposition + options.transposition_cost,\n          coordinates: {\n            row: _row - 2,\n            column: _column - 2\n          }\n        });\n      }\n\n      var minCostParent = _.min(possibleParents, function (p) {\n        return p.cost;\n      });\n\n      distanceMatrix[_row][_column] = {\n        cost: minCostParent.cost,\n        parentCell: minCostParent.coordinates\n      };\n\n      if (isUnrestrictedDamerau) {\n        lastRowMap[sourceElement] = _row;\n\n        if (sourceElement === targetElement) {\n          lastColMatch = _column;\n        }\n      }\n    }\n  }\n\n  if (!options.search) {\n    return distanceMatrix[sourceLength][targetLength].cost;\n  }\n\n  return getMinCostSubstring(distanceMatrix, source, target);\n}\n\nmodule.exports = {\n  LevenshteinDistance: LevenshteinDistance,\n  DamerauLevenshteinDistance: DamerauLevenshteinDistance\n};","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/distance/levenshtein_distance.js"],"names":["_","require","_getMatchStart","distanceMatrix","matchEnd","sourceLength","row","column","tmpRow","tmpColumn","parentCell","getMinCostSubstring","source","target","length","targetLength","minDistance","cost","matchStart","substring","slice","distance","offset","DamerauLevenshteinDistance","options","damLevOptions","extend","transposition_cost","restricted","damerau","levenshteinDistance","LevenshteinDistance","levOptions","isNaN","insertion_cost","deletion_cost","substitution_cost","search","isUnrestrictedDamerau","isRestrictedDamerau","lastRowMap","lastColMatch","costToInsert","costToDelete","sourceElement","targetElement","costToSubstitute","possibleParents","coordinates","canDamerau","costBeforeTransposition","lastRowMatch","costToTranspose","push","canDoRestrictedDamerau","minCostParent","min","p","module","exports"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2012, Sid Nallu, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\n/*\n * contribution by sidred123\n */\n\n/*\n * Compute the Levenshtein distance between two strings.\n * Algorithm based from Speech and Language Processing - Daniel Jurafsky and James H. Martin.\n */\n\nconst _ = require('underscore')\n\n// Walk the path back from the matchEnd to the beginning of the match.\n// Do this by traversing the distanceMatrix as you would a linked list,\n// following going from cell child to parent until reach row 0.\nfunction _getMatchStart (distanceMatrix, matchEnd, sourceLength) {\n  let row = sourceLength\n  let column = matchEnd\n  let tmpRow\n  let tmpColumn\n\n  // match will be empty string\n  if (matchEnd === 0) { return 0 }\n\n  while (row > 1 && column > 1) {\n    tmpRow = row\n    tmpColumn = column\n    row = distanceMatrix[tmpRow][tmpColumn].parentCell.row\n    column = distanceMatrix[tmpRow][tmpColumn].parentCell.column\n  }\n\n  return column - 1\n}\n\nfunction getMinCostSubstring (distanceMatrix, source, target) {\n  const sourceLength = source.length\n  const targetLength = target.length\n  let minDistance = sourceLength + targetLength\n  let matchEnd = targetLength\n\n  // Find minimum value in last row of the cost matrix. This cell marks the\n  // end of the match string.\n  for (let column = 0; column <= targetLength; column++) {\n    if (minDistance > distanceMatrix[sourceLength][column].cost) {\n      minDistance = distanceMatrix[sourceLength][column].cost\n      matchEnd = column\n    }\n  }\n\n  const matchStart = _getMatchStart(distanceMatrix, matchEnd, sourceLength)\n  return { substring: target.slice(matchStart, matchEnd), distance: minDistance, offset: matchStart }\n}\n\n/*\n* Returns the Damerau-Levenshtein distance between strings. Counts the distance\n* between two strings by returning the number of edit operations required to\n* convert `source` into `target`.\n*\n* Valid edit operations are:\n*  - transposition, insertion, deletion, and substitution\n*\n* Options:\n*  insertion_cost: (default: 1)\n*  deletion_cost: number (default: 1)\n*  substitution_cost: number (default: 1)\n*  transposition_cost: number (default: 1)\n*  search: boolean (default: false)\n*  restricted: boolean (default: false)\n*/\nfunction DamerauLevenshteinDistance (source, target, options) {\n  const damLevOptions = _.extend(\n    { transposition_cost: 1, restricted: false },\n    options || {},\n    { damerau: true }\n  )\n  return levenshteinDistance(source, target, damLevOptions)\n}\n\nfunction LevenshteinDistance (source, target, options) {\n  const levOptions = _.extend({}, options || {}, { damerau: false })\n  return levenshteinDistance(source, target, levOptions)\n}\n\nfunction levenshteinDistance (source, target, options) {\n  if (isNaN(options.insertion_cost)) options.insertion_cost = 1\n  if (isNaN(options.deletion_cost)) options.deletion_cost = 1\n  if (isNaN(options.substitution_cost)) options.substitution_cost = 1\n\n  if (typeof options.search !== 'boolean') options.search = false\n\n  const isUnrestrictedDamerau = options.damerau && !options.restricted\n  const isRestrictedDamerau = options.damerau && options.restricted\n\n  let lastRowMap = null\n  if (isUnrestrictedDamerau) {\n    lastRowMap = {}\n  }\n\n  const sourceLength = source.length\n  const targetLength = target.length\n  const distanceMatrix = [[{ cost: 0 }]] // the root, has no parent cell\n\n  for (let row = 1; row <= sourceLength; row++) {\n    distanceMatrix[row] = []\n    distanceMatrix[row][0] = { cost: distanceMatrix[row - 1][0].cost + options.deletion_cost, parentCell: { row: row - 1, column: 0 } }\n  }\n\n  for (let column = 1; column <= targetLength; column++) {\n    if (options.search) {\n      distanceMatrix[0][column] = { cost: 0 }\n    } else {\n      distanceMatrix[0][column] = { cost: distanceMatrix[0][column - 1].cost + options.insertion_cost, parentCell: { row: 0, column: column - 1 } }\n    }\n  }\n\n  let lastColMatch = null\n  for (let row = 1; row <= sourceLength; row++) {\n    if (isUnrestrictedDamerau) {\n      lastColMatch = null\n    }\n    for (let column = 1; column <= targetLength; column++) {\n      const costToInsert = distanceMatrix[row][column - 1].cost + options.insertion_cost\n      const costToDelete = distanceMatrix[row - 1][column].cost + options.deletion_cost\n\n      const sourceElement = source[row - 1]\n      const targetElement = target[column - 1]\n      let costToSubstitute = distanceMatrix[row - 1][column - 1].cost\n      if (sourceElement !== targetElement) {\n        costToSubstitute = costToSubstitute + options.substitution_cost\n      }\n\n      const possibleParents = [\n        { cost: costToInsert, coordinates: { row: row, column: column - 1 } },\n        { cost: costToDelete, coordinates: { row: row - 1, column: column } },\n        { cost: costToSubstitute, coordinates: { row: row - 1, column: column - 1 } }\n      ]\n\n      // We can add damerau to the possibleParents if the current\n      // target-letter has been encountered in our lastRowMap,\n      // and if there exists a previous column in this row where the\n      // row & column letters matched\n      const canDamerau = isUnrestrictedDamerau &&\n                row > 1 && column > 1 &&\n                lastColMatch &&\n                targetElement in lastRowMap\n\n      let costBeforeTransposition = null\n      if (canDamerau) {\n        const lastRowMatch = lastRowMap[targetElement]\n        costBeforeTransposition =\n                    distanceMatrix[lastRowMatch - 1][lastColMatch - 1].cost\n        const costToTranspose = costBeforeTransposition +\n                    ((row - lastRowMatch - 1) * options.deletion_cost) +\n                    ((column - lastColMatch - 1) * options.insertion_cost) +\n                    options.transposition_cost\n        possibleParents.push({\n          cost: costToTranspose,\n          coordinates: {\n            row: lastRowMatch - 1,\n            column: lastColMatch - 1\n          }\n        })\n      }\n      // Source and target chars are 1-indexed in the distanceMatrix so previous\n      // source/target element is (col/row - 2)\n      const canDoRestrictedDamerau = isRestrictedDamerau &&\n                row > 1 && column > 1 &&\n                sourceElement === target[column - 2] &&\n                source[row - 2] === targetElement\n\n      if (canDoRestrictedDamerau) {\n        costBeforeTransposition = distanceMatrix[row - 2][column - 2].cost\n        possibleParents.push({\n          cost: costBeforeTransposition + options.transposition_cost,\n          coordinates: { row: row - 2, column: column - 2 }\n        })\n      }\n\n      const minCostParent = _.min(possibleParents, function (p) { return p.cost })\n\n      distanceMatrix[row][column] = { cost: minCostParent.cost, parentCell: minCostParent.coordinates }\n\n      if (isUnrestrictedDamerau) {\n        lastRowMap[sourceElement] = row\n        if (sourceElement === targetElement) {\n          lastColMatch = column\n        }\n      }\n    }\n  }\n\n  if (!options.search) {\n    return distanceMatrix[sourceLength][targetLength].cost\n  }\n\n  return getMinCostSubstring(distanceMatrix, source, target)\n}\n\nmodule.exports = {\n  LevenshteinDistance: LevenshteinDistance,\n  DamerauLevenshteinDistance: DamerauLevenshteinDistance\n}\n"]},"metadata":{},"sourceType":"script"}