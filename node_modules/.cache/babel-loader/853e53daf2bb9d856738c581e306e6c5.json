{"ast":null,"code":"/*\n  Sentence class specific for MaxEnt modeling\n  Copyright (C) 2019 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n'use strict';\n\nvar util = require('util');\n\nvar Context = require('../Context');\n\nvar Sentence = require('../../../brill_pos_tagger/lib/Sentence');\n\nvar Element = require('./POS_Element');\n\nfunction MESentence(data) {\n  MESentence.super_.call(this, data);\n}\n\nutil.inherits(MESentence, Sentence);\n\nMESentence.prototype.generateSampleElements = function (sample) {\n  var sentence = this.taggedWords;\n  sentence.forEach(function (token, index) {\n    var x = new Element(token.tag, new Context({\n      wordWindow: {},\n      tagWindow: {}\n    })); // Current word and tag\n\n    x.b.data.wordWindow['0'] = token.token;\n    x.b.data.tagWindow['0'] = sentence[index].tag; // Previous bigram\n\n    if (index > 1) {\n      x.b.data.tagWindow['-2'] = sentence[index - 2].tag;\n      x.b.data.wordWindow['-2'] = sentence[index - 2].token;\n    } // Left bigram\n\n\n    if (index > 0) {\n      x.b.data.tagWindow['-1'] = sentence[index - 1].tag;\n      x.b.data.wordWindow['-1'] = sentence[index - 1].token;\n    } // Right bigram\n\n\n    if (index < sentence.length - 1) {\n      x.b.data.tagWindow['1'] = sentence[index + 1].tag;\n      x.b.data.wordWindow['1'] = sentence[index + 1].token;\n    } // Next bigram\n\n\n    if (index < sentence.length - 2) {\n      x.b.data.tagWindow['2'] = sentence[index + 2].tag;\n      x.b.data.wordWindow['2'] = sentence[index + 2].token;\n    }\n\n    sample.addElement(x);\n  });\n};\n\nmodule.exports = MESentence;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/classifiers/maxent/POS/ME_Sentence.js"],"names":["util","require","Context","Sentence","Element","MESentence","data","super_","call","inherits","prototype","generateSampleElements","sample","sentence","taggedWords","forEach","token","index","x","tag","wordWindow","tagWindow","b","length","addElement","module","exports"],"mappings":"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","sourcesContent":["/*\n  Sentence class specific for MaxEnt modeling\n  Copyright (C) 2019 Hugo W.L. ter Doest\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict'\n\nconst util = require('util')\nconst Context = require('../Context')\nconst Sentence = require('../../../brill_pos_tagger/lib/Sentence')\nconst Element = require('./POS_Element')\n\nfunction MESentence (data) {\n  MESentence.super_.call(this, data)\n}\n\nutil.inherits(MESentence, Sentence)\n\nMESentence.prototype.generateSampleElements = function (sample) {\n  const sentence = this.taggedWords\n  sentence.forEach(function (token, index) {\n    const x = new Element(\n      token.tag,\n      new Context({\n        wordWindow: {},\n        tagWindow: {}\n      })\n    )\n\n    // Current word and tag\n    x.b.data.wordWindow['0'] = token.token\n    x.b.data.tagWindow['0'] = sentence[index].tag\n\n    // Previous bigram\n    if (index > 1) {\n      x.b.data.tagWindow['-2'] = sentence[index - 2].tag\n      x.b.data.wordWindow['-2'] = sentence[index - 2].token\n    }\n\n    // Left bigram\n    if (index > 0) {\n      x.b.data.tagWindow['-1'] = sentence[index - 1].tag\n      x.b.data.wordWindow['-1'] = sentence[index - 1].token\n    }\n\n    // Right bigram\n    if (index < sentence.length - 1) {\n      x.b.data.tagWindow['1'] = sentence[index + 1].tag\n      x.b.data.wordWindow['1'] = sentence[index + 1].token\n    }\n\n    // Next bigram\n    if (index < sentence.length - 2) {\n      x.b.data.tagWindow['2'] = sentence[index + 2].tag\n      x.b.data.wordWindow['2'] = sentence[index + 2].token\n    }\n\n    sample.addElement(x)\n  })\n}\n\nmodule.exports = MESentence\n"]},"metadata":{},"sourceType":"script"}