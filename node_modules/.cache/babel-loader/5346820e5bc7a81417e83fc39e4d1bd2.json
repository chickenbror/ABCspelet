{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n\nvar Phonetic = require('./phonetic');\n\nvar DoubleMetaphone = new Phonetic();\nmodule.exports = DoubleMetaphone;\n\nfunction isVowel(c) {\n  return c && c.match(/[aeiouy]/i);\n}\n\nfunction truncate(string, length) {\n  if (string.length >= length) {\n    string = string.substring(0, length);\n  }\n\n  return string;\n}\n\nfunction process(token, maxLength) {\n  token = token.toUpperCase();\n  var primary = '';\n  var secondary = '';\n  var pos = 0;\n  maxLength = maxLength || 32;\n\n  function subMatch(startOffset, stopOffset, terms) {\n    return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms);\n  }\n\n  function subMatchAbsolute(startOffset, stopOffset, terms) {\n    return terms.indexOf(token.substring(startOffset, stopOffset)) > -1;\n  }\n\n  function addSecondary(primaryAppendage, secondaryAppendage) {\n    primary += primaryAppendage;\n    secondary += secondaryAppendage;\n  }\n\n  function add(primaryAppendage) {\n    addSecondary(primaryAppendage, primaryAppendage);\n  }\n\n  function addCompressedDouble(c, encoded) {\n    if (token[pos + 1] === c) {\n      pos++;\n    }\n\n    add(encoded || c);\n  }\n\n  function handleC() {\n    if (pos >= 1 && !isVowel(token[pos - 2]) && token[pos - 1] === 'A' && token[pos + 1] === 'H' && token[pos + 2] !== 'I' || subMatch(-2, 4, ['BACHER', 'MACHER'])) {\n      add('K');\n      pos++;\n    } else if (pos === 0 && token.substring(1, 6) === 'EASAR') {\n      add('S');\n      add('S');\n      add('R');\n      pos += 6;\n    } else if (token.substring(pos + 1, pos + 4) === 'HIA') {\n      add('K');\n      pos++;\n    } else if (token[pos + 1] === 'H') {\n      if (pos > 0 && token.substring(pos + 2, pos + 4) === 'AE') {\n        addSecondary('K', 'X');\n        pos++;\n      } else if (pos === 0 && (subMatch(1, 6, ['HARAC', 'HARIS']) || subMatch(1, 4, ['HOR', 'HUM', 'HIA', 'HEM'])) && token.substring(pos + 1, pos + 5) !== 'HORE') {\n        add('K');\n        pos++;\n      } else {\n        if (subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0, 3) === 'SCH' || subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID']) || subMatch(2, 3, ['T', 'S']) || (subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos === 0) && subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W'])) {\n          add('K');\n        } else if (pos > 0) {\n          if (token.substring(0, 2) === 'MC') {\n            add('K');\n          } else {\n            addSecondary('X', 'K');\n          }\n        } else {\n          add('X');\n        }\n\n        pos++;\n      }\n    } else if (token.substring(pos, pos + 2) === 'CZ' && token.substring(pos - 2, pos + 1) !== 'WICZ') {\n      addSecondary('S', 'X');\n      pos++;\n    } else if (token.substring(pos, pos + 3) === 'CIA') {\n      add('X');\n      pos += 2;\n    } else if (token[pos + 1] === 'C' && pos !== 1 && token[0] !== 'M') {\n      if (['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 && token.substring(pos + 2, pos + 4) !== 'HU') {\n        if (pos === 1 && token[pos - 1] === 'A' || subMatch(-1, 4, ['UCCEE', 'UCCES'])) {\n          add('KS');\n        } else {\n          add('X');\n        }\n\n        pos += 2;\n      } else {\n        add('K');\n        pos++;\n      }\n    } else if (['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {\n      add('K');\n      pos++;\n    } else if (['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {\n      if (subMatch(1, 3, ['IA', 'IE', 'IO'])) {\n        addSecondary('S', 'X');\n      } else {\n        add('S');\n      }\n\n      pos++;\n    } else {\n      add('K');\n\n      if (token[pos + 1] === ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {\n        pos += 2;\n      } else if (['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1 && !subMatch(1, 3, ['CE', 'CI'])) {\n        pos++;\n      }\n    }\n  }\n\n  function handleD() {\n    if (token[pos + 1] === 'G') {\n      if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n        add('J');\n        pos += 2;\n      } else {\n        add('TK');\n        pos++;\n      }\n    } else if (token[pos + 1] === 'T') {\n      add('T');\n      pos++;\n    } else {\n      addCompressedDouble('D', 'T');\n    }\n  }\n\n  function handleG() {\n    if (token[pos + 1] === 'H') {\n      if (pos > 0 && !isVowel(token[pos - 1])) {\n        add('K');\n        pos++;\n      } else if (pos === 0) {\n        if (token[pos + 2] === 'I') {\n          add('J');\n        } else {\n          add('K');\n        }\n\n        pos++;\n      } else if (pos > 1 && (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1 || ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1 || ['B', 'H'].indexOf(token[pos - 4]) > -1)) {\n        pos++;\n      } else {\n        if (pos > 2 && token[pos - 1] === 'U' && ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {\n          add('F');\n        } else if (token[pos - 1] !== 'I') {\n          add('K');\n        }\n\n        pos++;\n      }\n    } else if (token[pos + 1] === 'N') {\n      if (pos === 1 && startsWithVowel && !slavoGermanic) {\n        addSecondary('KN', 'N');\n      } else {\n        if (token.substring(pos + 2, pos + 4) !== 'EY' && token[pos + 1] !== 'Y' && !slavoGermanic) {\n          addSecondary('N', 'KN');\n        } else {\n          add('KN');\n        }\n      }\n\n      pos++;\n    } else if (token.substring(pos + 1, pos + 3) === 'LI' && !slavoGermanic) {\n      addSecondary('KL', 'L');\n      pos++;\n    } else if (pos === 0 && (token[pos + 1] === 'Y' || subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {\n      addSecondary('K', 'J');\n    } else {\n      addCompressedDouble('G', 'K');\n    }\n  }\n\n  function handleH() {\n    // keep if starts a word or is surrounded by vowels\n    if ((pos === 0 || isVowel(token[pos - 1])) && isVowel(token[pos + 1])) {\n      add('H');\n      pos++;\n    }\n  }\n\n  function handleJ() {\n    var jose = token.substring(pos + 1, pos + 4) === 'OSE';\n\n    if (san || jose) {\n      if (pos === 0 && token[pos + 4] === ' ' || san) {\n        add('H');\n      } else {\n        add('J', 'H');\n      }\n    } else {\n      if (pos === 0\n      /* && !jose */\n      ) {\n          addSecondary('J', 'A');\n        } else if (isVowel(token[pos - 1]) && !slavoGermanic && (token[pos + 1] === 'A' || token[pos + 1] === 'O')) {\n        addSecondary('J', 'H');\n      } else if (pos === token.length - 1) {\n        addSecondary('J', ' ');\n      } else {\n        addCompressedDouble('J');\n      }\n    }\n  }\n\n  function handleL() {\n    if (token[pos + 1] === 'L') {\n      if (pos === token.length - 3 && (subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || token.substring(pos - 1, pos + 3) === 'ALLE' && (subMatch(-2, -1, ['AS', 'OS']) > -1 || ['A', 'O'].indexOf(token[token.length - 1]) > -1))) {\n        addSecondary('L', '');\n        pos++;\n        return;\n      }\n\n      pos++;\n    }\n\n    add('L');\n  }\n\n  function handleM() {\n    addCompressedDouble('M');\n\n    if (token[pos - 1] === 'U' && token[pos + 1] === 'B' && (pos === token.length - 2 || token.substring(pos + 2, pos + 4) === 'ER')) {\n      pos++;\n    }\n  }\n\n  function handleP() {\n    if (token[pos + 1] === 'H') {\n      add('F');\n      pos++;\n    } else {\n      addCompressedDouble('P');\n\n      if (token[pos + 1] === 'B') {\n        pos++;\n      }\n    }\n  }\n\n  function handleR() {\n    if (pos === token.length - 1 && !slavoGermanic && token.substring(pos - 2, pos) === 'IE' && !subMatch(-4, -3, ['ME', 'MA'])) {\n      addSecondary('', 'R');\n    } else {\n      addCompressedDouble('R');\n    }\n  }\n\n  function handleS() {\n    if (pos === 0 && token.substring(0, 5) === 'SUGAR') {\n      addSecondary('X', 'S');\n    } else if (token[pos + 1] === 'H') {\n      if (subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {\n        add('S');\n      } else {\n        add('X');\n      }\n\n      pos++;\n    } else if (subMatch(1, 3, ['IO', 'IA'])) {\n      if (slavoGermanic) {\n        add('S');\n      } else {\n        addSecondary('S', 'X');\n      }\n\n      pos++;\n    } else if (pos === 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1 || token[pos + 1] === 'Z') {\n      addSecondary('S', 'X');\n\n      if (token[pos + 1] === 'Z') {\n        pos++;\n      }\n    } else if (token.substring(pos, pos + 2) === 'SC') {\n      if (token[pos + 2] === 'H') {\n        if (subMatch(3, 5, ['ER', 'EN'])) {\n          addSecondary('X', 'SK');\n        } else if (subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {\n          add('SK');\n        } else if (pos === 0 && !isVowel(token[3]) && token[3] !== 'W') {\n          addSecondary('X', 'S');\n        } else {\n          add('X');\n        }\n      } else if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n        add('S');\n      } else {\n        add('SK');\n      }\n\n      pos += 2;\n    } else if (pos === token.length - 1 && subMatch(-2, 0, ['AI', 'OI'])) {\n      addSecondary('', 'S');\n    } else if (token[pos + 1] !== 'L' && token[pos - 1] !== 'A' && token[pos - 1] !== 'I') {\n      addCompressedDouble('S');\n\n      if (token[pos + 1] === 'Z') {\n        pos++;\n      }\n    }\n  }\n\n  function handleT() {\n    if (token.substring(pos + 1, pos + 4) === 'ION') {\n      add('XN');\n      pos += 3;\n    } else if (subMatch(1, 3, ['IA', 'CH'])) {\n      add('X');\n      pos += 2;\n    } else if (token[pos + 1] === 'H' || token.substring(1, 2) === 'TH') {\n      if (subMatch(2, 4, ['OM', 'AM']) || ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1 || token.substring(0, 3) === 'SCH') {\n        add('T');\n      } else {\n        addSecondary('0', 'T');\n      }\n\n      pos++;\n    } else {\n      addCompressedDouble('T');\n\n      if (token[pos + 1] === 'D') {\n        pos++;\n      }\n    }\n  }\n\n  function handleX() {\n    if (pos === 0) {\n      add('S');\n    } else if (!(pos === token.length - 1 && (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1 || ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {\n      add('KS');\n    }\n  }\n\n  function handleW() {\n    if (pos === 0) {\n      if (token[1] === 'H') {\n        add('A');\n      } else if (isVowel(token[1])) {\n        addSecondary('A', 'F');\n      }\n    } else if (subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY']) || token.substring(0, 3) === 'SCH' || pos === token.length - 1 && isVowel(token[pos - 1])) {\n      addSecondary('', 'F');\n      pos++;\n    } else if (['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {\n      addSecondary('TS', 'FX');\n      pos += 3;\n    }\n  }\n\n  function handleZ() {\n    if (token[pos + 1] === 'H') {\n      add('J');\n      pos++;\n    } else if (subMatch(1, 3, ['ZO', 'ZI', 'ZA']) || slavoGermanic && pos > 0 && token[pos - 1] !== 'T') {\n      addSecondary('S', 'TS');\n      pos++;\n    } else {\n      addCompressedDouble('Z', 'S');\n    }\n  }\n\n  var san = token.substring(0, 3) === 'SAN';\n  var startsWithVowel = isVowel(token[0]);\n  var slavoGermanic = token.match(/(W|K|CZ|WITZ)/);\n\n  if (subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {\n    pos++;\n  }\n\n  while (pos < token.length) {\n    switch (token[pos]) {\n      case 'A':\n      case 'E':\n      case 'I':\n      case 'O':\n      case 'U':\n      case 'Y':\n      case 'Ê':\n      case 'É':\n      case 'À':\n        if (pos === 0) {\n          add('A');\n        }\n\n        break;\n\n      case 'B':\n        addCompressedDouble('B', 'P');\n        break;\n\n      case 'C':\n        handleC();\n        break;\n\n      case 'Ç':\n        add('S');\n        break;\n\n      case 'D':\n        handleD();\n        break;\n\n      case 'F':\n      case 'K':\n      case 'N':\n        addCompressedDouble(token[pos]);\n        break;\n\n      case 'G':\n        handleG();\n        break;\n\n      case 'H':\n        handleH();\n        break;\n\n      case 'J':\n        handleJ();\n        break;\n\n      case 'L':\n        handleL();\n        break;\n\n      case 'M':\n        handleM();\n        break;\n\n      case 'Ñ':\n        add('N');\n        break;\n\n      case 'P':\n        handleP();\n        break;\n\n      case 'Q':\n        addCompressedDouble('Q', 'K');\n        break;\n\n      case 'R':\n        handleR();\n        break;\n\n      case 'S':\n        handleS();\n        break;\n\n      case 'T':\n        handleT();\n        break;\n\n      case 'V':\n        addCompressedDouble('V', 'F');\n        break;\n\n      case 'W':\n        handleW();\n        break;\n\n      case 'X':\n        handleX();\n        break;\n\n      case 'Z':\n        handleZ();\n        break;\n    }\n\n    if (primary.length >= maxLength && secondary.length >= maxLength) {\n      break;\n    }\n\n    pos++;\n  }\n\n  return [truncate(primary, maxLength), truncate(secondary, maxLength)];\n}\n\nfunction compare(stringA, stringB) {\n  var encodingsA = process(stringA);\n  var encodingsB = process(stringB);\n  return encodingsA[0] === encodingsB[0] || encodingsA[1] === encodingsB[1];\n}\n\n;\nDoubleMetaphone.compare = compare;\nDoubleMetaphone.process = process;\nDoubleMetaphone.isVowel = isVowel;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/phonetics/double_metaphone.js"],"names":["Phonetic","require","DoubleMetaphone","module","exports","isVowel","c","match","truncate","string","length","substring","process","token","maxLength","toUpperCase","primary","secondary","pos","subMatch","startOffset","stopOffset","terms","subMatchAbsolute","indexOf","addSecondary","primaryAppendage","secondaryAppendage","add","addCompressedDouble","encoded","handleC","handleD","handleG","startsWithVowel","slavoGermanic","handleH","handleJ","jose","san","handleL","handleM","handleP","handleR","handleS","handleT","handleX","handleW","handleZ","compare","stringA","stringB","encodingsA","encodingsB"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst Phonetic = require('./phonetic')\n\nconst DoubleMetaphone = new Phonetic()\nmodule.exports = DoubleMetaphone\n\nfunction isVowel (c) {\n  return c && c.match(/[aeiouy]/i)\n}\n\nfunction truncate (string, length) {\n  if (string.length >= length) { string = string.substring(0, length) }\n\n  return string\n}\n\nfunction process (token, maxLength) {\n  token = token.toUpperCase()\n  let primary = ''; let secondary = ''\n  let pos = 0\n  maxLength = maxLength || 32\n\n  function subMatch (startOffset, stopOffset, terms) {\n    return subMatchAbsolute(pos + startOffset, pos + stopOffset, terms)\n  }\n\n  function subMatchAbsolute (startOffset, stopOffset, terms) {\n    return terms.indexOf(token.substring(startOffset, stopOffset)) > -1\n  }\n\n  function addSecondary (primaryAppendage, secondaryAppendage) {\n    primary += primaryAppendage\n    secondary += secondaryAppendage\n  }\n\n  function add (primaryAppendage) {\n    addSecondary(primaryAppendage, primaryAppendage)\n  }\n\n  function addCompressedDouble (c, encoded) {\n    if (token[pos + 1] === c) {\n      pos++\n    }\n    add(encoded || c)\n  }\n\n  function handleC () {\n    if ((pos >= 1 && !isVowel(token[pos - 2]) &&\n      token[pos - 1] === 'A' && token[pos + 1] === 'H' &&\n      token[pos + 2] !== 'I') ||\n      subMatch(-2, 4, ['BACHER', 'MACHER'])) {\n      add('K')\n      pos++\n    } else if (pos === 0 && token.substring(1, 6) === 'EASAR') {\n      add('S')\n      add('S')\n      add('R')\n      pos += 6\n    } else if (token.substring(pos + 1, pos + 4) === 'HIA') {\n      add('K')\n      pos++\n    } else if (token[pos + 1] === 'H') {\n      if (pos > 0 && token.substring(pos + 2, pos + 4) === 'AE') {\n        addSecondary('K', 'X')\n        pos++\n      } else if (pos === 0 &&\n                        (subMatch(1, 6, ['HARAC', 'HARIS']) ||\n                            subMatch(1, 4, ['HOR', 'HUM', 'HIA', 'HEM'])) &&\n                        token.substring(pos + 1, pos + 5) !== 'HORE') {\n        add('K')\n        pos++\n      } else {\n        if ((subMatchAbsolute(0, 3, ['VAN', 'VON']) || token.substring(0, 3) === 'SCH') ||\n                    subMatch(-2, 4, ['ORCHES', 'ARCHIT', 'ORCHID']) ||\n                    subMatch(2, 3, ['T', 'S']) ||\n                    ((subMatch(-1, 0, ['A', 'O', 'U', 'E']) || pos === 0) &&\n                        subMatch(2, 3, ['B', 'F', 'H', 'L', 'M', 'N', 'R', 'V', 'W']))) {\n          add('K')\n        } else if (pos > 0) {\n          if (token.substring(0, 2) === 'MC') {\n            add('K')\n          } else {\n            addSecondary('X', 'K')\n          }\n        } else {\n          add('X')\n        }\n\n        pos++\n      }\n    } else if (token.substring(pos, pos + 2) === 'CZ' &&\n                token.substring(pos - 2, pos + 1) !== 'WICZ') {\n      addSecondary('S', 'X')\n      pos++\n    } else if (token.substring(pos, pos + 3) === 'CIA') {\n      add('X')\n      pos += 2\n    } else if (token[pos + 1] === 'C' && pos !== 1 && token[0] !== 'M') {\n      if (['I', 'E', 'H'].indexOf(token[pos + 2]) > -1 &&\n                    token.substring(pos + 2, pos + 4) !== 'HU') {\n        if ((pos === 1 && token[pos - 1] === 'A') ||\n              subMatch(-1, 4, ['UCCEE', 'UCCES'])) {\n          add('KS')\n        } else {\n          add('X')\n        }\n\n        pos += 2\n      } else {\n        add('K')\n        pos++\n      }\n    } else if (['K', 'G', 'Q'].indexOf(token[pos + 1]) > -1) {\n      add('K')\n      pos++\n    } else if (['E', 'I', 'Y'].indexOf(token[pos + 1]) > -1) {\n      if (subMatch(1, 3, ['IA', 'IE', 'IO'])) {\n        addSecondary('S', 'X')\n      } else {\n        add('S')\n      }\n      pos++\n    } else {\n      add('K')\n      if (token[pos + 1] === ' ' && ['C', 'Q', 'G'].indexOf(token[pos + 2])) {\n        pos += 2\n      } else if (['C', 'K', 'Q'].indexOf(token[pos + 1]) > -1 &&\n                    !subMatch(1, 3, ['CE', 'CI'])) {\n        pos++\n      }\n    }\n  }\n\n  function handleD () {\n    if (token[pos + 1] === 'G') {\n      if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n        add('J')\n        pos += 2\n      } else {\n        add('TK')\n        pos++\n      }\n    } else if (token[pos + 1] === 'T') {\n      add('T')\n      pos++\n    } else { addCompressedDouble('D', 'T') }\n  }\n\n  function handleG () {\n    if (token[pos + 1] === 'H') {\n      if (pos > 0 && !isVowel(token[pos - 1])) {\n        add('K')\n        pos++\n      } else if (pos === 0) {\n        if (token[pos + 2] === 'I') {\n          add('J')\n        } else {\n          add('K')\n        }\n        pos++\n      } else if (pos > 1 &&\n                (['B', 'H', 'D'].indexOf(token[pos - 2]) > -1 ||\n                    ['B', 'H', 'D'].indexOf(token[pos - 3]) > -1 ||\n                    ['B', 'H'].indexOf(token[pos - 4]) > -1)) {\n        pos++\n      } else {\n        if (pos > 2 &&\n                        token[pos - 1] === 'U' &&\n                        ['C', 'G', 'L', 'R', 'T'].indexOf(token[pos - 3]) > -1) {\n          add('F')\n        } else if (token[pos - 1] !== 'I') {\n          add('K')\n        }\n\n        pos++\n      }\n    } else if (token[pos + 1] === 'N') {\n      if (pos === 1 && startsWithVowel && !slavoGermanic) {\n        addSecondary('KN', 'N')\n      } else {\n        if (token.substring(pos + 2, pos + 4) !== 'EY' &&\n                        (token[pos + 1] !== 'Y' &&\n                            !slavoGermanic)) {\n          addSecondary('N', 'KN')\n        } else { add('KN') }\n      }\n      pos++\n    } else if (token.substring(pos + 1, pos + 3) === 'LI' && !slavoGermanic) {\n      addSecondary('KL', 'L')\n      pos++\n    } else if (pos === 0 && (token[pos + 1] === 'Y' ||\n                subMatch(1, 3, ['ES', 'EP', 'EB', 'EL', 'EY', 'IB', 'IL', 'IN', 'IE', 'EI', 'ER']))) {\n      addSecondary('K', 'J')\n    } else {\n      addCompressedDouble('G', 'K')\n    }\n  }\n\n  function handleH () {\n    // keep if starts a word or is surrounded by vowels\n    if ((pos === 0 || isVowel(token[pos - 1])) && isVowel(token[pos + 1])) {\n      add('H')\n      pos++\n    }\n  }\n\n  function handleJ () {\n    const jose = (token.substring(pos + 1, pos + 4) === 'OSE')\n\n    if (san || jose) {\n      if ((pos === 0 && token[pos + 4] === ' ') ||\n                    san) {\n        add('H')\n      } else { add('J', 'H') }\n    } else {\n      if (pos === 0/* && !jose */) {\n        addSecondary('J', 'A')\n      } else if (isVowel(token[pos - 1]) && !slavoGermanic &&\n                    (token[pos + 1] === 'A' || token[pos + 1] === 'O')) {\n        addSecondary('J', 'H')\n      } else if (pos === token.length - 1) {\n        addSecondary('J', ' ')\n      } else { addCompressedDouble('J') }\n    }\n  }\n\n  function handleL () {\n    if (token[pos + 1] === 'L') {\n      if (pos === token.length - 3 && (\n        subMatch(-1, 3, ['ILLO', 'ILLA', 'ALLE']) || (\n          token.substring(pos - 1, pos + 3) === 'ALLE' &&\n          (subMatch(-2, -1, ['AS', 'OS']) > -1 ||\n          ['A', 'O'].indexOf(token[token.length - 1]) > -1)))) {\n        addSecondary('L', '')\n        pos++\n        return\n      }\n      pos++\n    }\n    add('L')\n  }\n\n  function handleM () {\n    addCompressedDouble('M')\n    if (token[pos - 1] === 'U' && token[pos + 1] === 'B' &&\n      ((pos === token.length - 2 || token.substring(pos + 2, pos + 4) === 'ER'))) { pos++ }\n  }\n\n  function handleP () {\n    if (token[pos + 1] === 'H') {\n      add('F')\n      pos++\n    } else {\n      addCompressedDouble('P')\n      if (token[pos + 1] === 'B') {\n        pos++\n      }\n    }\n  }\n\n  function handleR () {\n    if (pos === token.length - 1 && !slavoGermanic &&\n      token.substring(pos - 2, pos) === 'IE' &&\n      !subMatch(-4, -3, ['ME', 'MA'])) {\n      addSecondary('', 'R')\n    } else {\n      addCompressedDouble('R')\n    }\n  }\n\n  function handleS () {\n    if (pos === 0 && token.substring(0, 5) === 'SUGAR') {\n      addSecondary('X', 'S')\n    } else if (token[pos + 1] === 'H') {\n      if (subMatch(2, 5, ['EIM', 'OEK', 'OLM', 'OLZ'])) {\n        add('S')\n      } else {\n        add('X')\n      }\n      pos++\n    } else if (subMatch(1, 3, ['IO', 'IA'])) {\n      if (slavoGermanic) {\n        add('S')\n      } else {\n        addSecondary('S', 'X')\n      }\n      pos++\n    } else if ((pos === 0 && ['M', 'N', 'L', 'W'].indexOf(token[pos + 1]) > -1) ||\n                token[pos + 1] === 'Z') {\n      addSecondary('S', 'X')\n      if (token[pos + 1] === 'Z') { pos++ }\n    } else if (token.substring(pos, pos + 2) === 'SC') {\n      if (token[pos + 2] === 'H') {\n        if (subMatch(3, 5, ['ER', 'EN'])) {\n          addSecondary('X', 'SK')\n        } else if (subMatch(3, 5, ['OO', 'UY', 'ED', 'EM'])) {\n          add('SK')\n        } else if (pos === 0 && !isVowel(token[3]) && token[3] !== 'W') {\n          addSecondary('X', 'S')\n        } else {\n          add('X')\n        }\n      } else if (['I', 'E', 'Y'].indexOf(token[pos + 2]) > -1) {\n        add('S')\n      } else {\n        add('SK')\n      }\n\n      pos += 2\n    } else if (pos === token.length - 1 &&\n                subMatch(-2, 0, ['AI', 'OI'])) {\n      addSecondary('', 'S')\n    } else if (token[pos + 1] !== 'L' && (\n      token[pos - 1] !== 'A' && token[pos - 1] !== 'I')) {\n      addCompressedDouble('S')\n      if (token[pos + 1] === 'Z') { pos++ }\n    }\n  }\n\n  function handleT () {\n    if (token.substring(pos + 1, pos + 4) === 'ION') {\n      add('XN')\n      pos += 3\n    } else if (subMatch(1, 3, ['IA', 'CH'])) {\n      add('X')\n      pos += 2\n    } else if (token[pos + 1] === 'H' ||\n                token.substring(1, 2) === 'TH') {\n      if (subMatch(2, 4, ['OM', 'AM']) ||\n                    ['VAN ', 'VON '].indexOf(token.substring(0, 4)) > -1 ||\n                    token.substring(0, 3) === 'SCH') {\n        add('T')\n      } else { addSecondary('0', 'T') }\n      pos++\n    } else {\n      addCompressedDouble('T')\n\n      if (token[pos + 1] === 'D') { pos++ }\n    }\n  }\n\n  function handleX () {\n    if (pos === 0) {\n      add('S')\n    } else if (!(pos === token.length - 1 &&\n      (['IAU', 'EAU', 'IEU'].indexOf(token.substring(pos - 3, pos)) > -1 ||\n      ['AU', 'OU'].indexOf(token.substring(pos - 2, pos)) > -1))) {\n      add('KS')\n    }\n  }\n\n  function handleW () {\n    if (pos === 0) {\n      if (token[1] === 'H') {\n        add('A')\n      } else if (isVowel(token[1])) {\n        addSecondary('A', 'F')\n      }\n    } else if (subMatch(-1, 4, ['EWSKI', 'EWSKY', 'OWSKI', 'OWSKY']) ||\n      token.substring(0, 3) === 'SCH' ||\n      (pos === token.length - 1 && isVowel(token[pos - 1]))) {\n      addSecondary('', 'F')\n      pos++\n    } else if (['ICZ', 'ITZ'].indexOf(token.substring(pos + 1, pos + 4)) > -1) {\n      addSecondary('TS', 'FX')\n      pos += 3\n    }\n  }\n\n  function handleZ () {\n    if (token[pos + 1] === 'H') {\n      add('J')\n      pos++\n    } else if (subMatch(1, 3, ['ZO', 'ZI', 'ZA']) ||\n      (slavoGermanic && pos > 0 && token[pos - 1] !== 'T')) {\n      addSecondary('S', 'TS')\n      pos++\n    } else { addCompressedDouble('Z', 'S') }\n  }\n\n  const san = (token.substring(0, 3) === 'SAN')\n  const startsWithVowel = isVowel(token[0])\n  const slavoGermanic = token.match(/(W|K|CZ|WITZ)/)\n\n  if (subMatch(0, 2, ['GN', 'KN', 'PN', 'WR', 'PS'])) {\n    pos++\n  }\n\n  while (pos < token.length) {\n    switch (token[pos]) {\n      case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y':\n      case 'Ê': case 'É': case 'À':\n        if (pos === 0) { add('A') }\n        break\n      case 'B':\n        addCompressedDouble('B', 'P')\n        break\n      case 'C':\n        handleC()\n        break\n      case 'Ç':\n        add('S')\n        break\n      case 'D':\n        handleD()\n        break\n      case 'F': case 'K': case 'N':\n        addCompressedDouble(token[pos])\n        break\n      case 'G':\n        handleG()\n        break\n      case 'H':\n        handleH()\n        break\n      case 'J':\n        handleJ()\n        break\n      case 'L':\n        handleL()\n        break\n      case 'M':\n        handleM()\n        break\n      case 'Ñ':\n        add('N')\n        break\n      case 'P':\n        handleP()\n        break\n      case 'Q':\n        addCompressedDouble('Q', 'K')\n        break\n      case 'R':\n        handleR()\n        break\n      case 'S':\n        handleS()\n        break\n      case 'T':\n        handleT()\n        break\n      case 'V':\n        addCompressedDouble('V', 'F')\n        break\n      case 'W':\n        handleW()\n        break\n      case 'X':\n        handleX()\n        break\n      case 'Z':\n        handleZ()\n        break\n    }\n\n    if (primary.length >= maxLength && secondary.length >= maxLength) {\n      break\n    }\n\n    pos++\n  }\n\n  return [truncate(primary, maxLength), truncate(secondary, maxLength)]\n}\n\nfunction compare (stringA, stringB) {\n  const encodingsA = process(stringA)\n  const encodingsB = process(stringB)\n\n  return encodingsA[0] === encodingsB[0] ||\n    encodingsA[1] === encodingsB[1]\n};\n\nDoubleMetaphone.compare = compare\nDoubleMetaphone.process = process\nDoubleMetaphone.isVowel = isVowel\n"]},"metadata":{},"sourceType":"script"}