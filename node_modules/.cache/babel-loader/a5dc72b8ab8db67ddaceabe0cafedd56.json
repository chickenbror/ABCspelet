{"ast":null,"code":"/*\nCopyright (c) 2011, Rob Ellis, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n\nvar Tokenizer = require('./tokenizer');\n\nvar util = require('util');\n\nvar _ = require('underscore'); // Base Class for RegExp Matching\n\n\nvar RegexpTokenizer = function RegexpTokenizer(opts) {\n  var options = opts || {};\n  this._pattern = options.pattern || this._pattern;\n  this.discardEmpty = options.discardEmpty || true; // Match and split on GAPS not the actual WORDS\n\n  this._gaps = options.gaps;\n\n  if (this._gaps === undefined) {\n    this._gaps = true;\n  }\n};\n\nutil.inherits(RegexpTokenizer, Tokenizer);\n\nRegexpTokenizer.prototype.tokenize = function (s) {\n  var results;\n\n  if (this._gaps) {\n    results = s.split(this._pattern);\n    return this.discardEmpty ? _.without(results, '', ' ') : results;\n  } else {\n    return s.match(this._pattern);\n  }\n};\n\nexports.RegexpTokenizer = RegexpTokenizer;\n\nvar orthographyMatchers = require('./orthography_matchers');\n/***\n * A tokenizer that accepts an alphabet definition.\n * @param {string} options.language ISO 639-1 for the language, e.g. 'en'\n */\n\n\nvar OrthographyTokenizer = function OrthographyTokenizer(options) {\n  var pattern = orthographyMatchers[options.language];\n\n  if (!pattern) {\n    WordTokenizer.call(this, options);\n  } else {\n    this._pattern = pattern;\n    RegexpTokenizer.call(this, options);\n  }\n};\n\nutil.inherits(OrthographyTokenizer, RegexpTokenizer);\nexports.OrthographyTokenizer = OrthographyTokenizer;\n/***\n * A tokenizer that divides a text into sequences of alphabetic and\n * non-alphabetic characters.  E.g.:\n *\n *      >>> WordTokenizer().tokenize(\"She said 'hello'.\")\n *      ['She', 'said', 'hello']\n *\n */\n\nvar WordTokenizer = function WordTokenizer(options) {\n  this._pattern = /[^A-Za-zА-Яа-я0-9_]+/;\n  RegexpTokenizer.call(this, options);\n};\n\nutil.inherits(WordTokenizer, RegexpTokenizer);\nexports.WordTokenizer = WordTokenizer;\n/***\n * A tokenizer that divides a text into sequences of alphabetic and\n * non-alphabetic characters.  E.g.:\n *\n *      >>> WordPunctTokenizer().tokenize(\"She said 'hello'.\")\n *      [\"She\",\"said\",\"'\",\"hello\",\"'\",\".\"]\n *\n */\n\nvar WordPunctTokenizer = function WordPunctTokenizer(options) {\n  this._pattern = /([A-zÀ-ÿ-]+|[0-9._]+|.|!|\\?|'|\"|:|;|,|-)/i;\n  RegexpTokenizer.call(this, options);\n};\n\nutil.inherits(WordPunctTokenizer, RegexpTokenizer);\nexports.WordPunctTokenizer = WordPunctTokenizer;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/tokenizers/regexp_tokenizer.js"],"names":["Tokenizer","require","util","_","RegexpTokenizer","opts","options","_pattern","pattern","discardEmpty","_gaps","gaps","undefined","inherits","prototype","tokenize","s","results","split","without","match","exports","orthographyMatchers","OrthographyTokenizer","language","WordTokenizer","call","WordPunctTokenizer"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Rob Ellis, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst Tokenizer = require('./tokenizer')\nconst util = require('util')\nconst _ = require('underscore')\n\n// Base Class for RegExp Matching\nconst RegexpTokenizer = function (opts) {\n  const options = opts || {}\n  this._pattern = options.pattern || this._pattern\n  this.discardEmpty = options.discardEmpty || true\n\n  // Match and split on GAPS not the actual WORDS\n  this._gaps = options.gaps\n\n  if (this._gaps === undefined) {\n    this._gaps = true\n  }\n}\n\nutil.inherits(RegexpTokenizer, Tokenizer)\n\nRegexpTokenizer.prototype.tokenize = function (s) {\n  let results\n\n  if (this._gaps) {\n    results = s.split(this._pattern)\n    return (this.discardEmpty) ? _.without(results, '', ' ') : results\n  } else {\n    return s.match(this._pattern)\n  }\n}\n\nexports.RegexpTokenizer = RegexpTokenizer\n\nconst orthographyMatchers = require('./orthography_matchers')\n\n/***\n * A tokenizer that accepts an alphabet definition.\n * @param {string} options.language ISO 639-1 for the language, e.g. 'en'\n */\nconst OrthographyTokenizer = function (options) {\n  const pattern = orthographyMatchers[options.language]\n  if (!pattern) {\n    WordTokenizer.call(this, options)\n  } else {\n    this._pattern = pattern\n    RegexpTokenizer.call(this, options)\n  }\n}\n\nutil.inherits(OrthographyTokenizer, RegexpTokenizer)\n\nexports.OrthographyTokenizer = OrthographyTokenizer\n\n/***\n * A tokenizer that divides a text into sequences of alphabetic and\n * non-alphabetic characters.  E.g.:\n *\n *      >>> WordTokenizer().tokenize(\"She said 'hello'.\")\n *      ['She', 'said', 'hello']\n *\n */\nconst WordTokenizer = function (options) {\n  this._pattern = /[^A-Za-zА-Яа-я0-9_]+/\n  RegexpTokenizer.call(this, options)\n}\n\nutil.inherits(WordTokenizer, RegexpTokenizer)\nexports.WordTokenizer = WordTokenizer\n\n/***\n * A tokenizer that divides a text into sequences of alphabetic and\n * non-alphabetic characters.  E.g.:\n *\n *      >>> WordPunctTokenizer().tokenize(\"She said 'hello'.\")\n *      [\"She\",\"said\",\"'\",\"hello\",\"'\",\".\"]\n *\n */\nconst WordPunctTokenizer = function (options) {\n  this._pattern = /([A-zÀ-ÿ-]+|[0-9._]+|.|!|\\?|'|\"|:|;|,|-)/i\n  RegexpTokenizer.call(this, options)\n}\n\nutil.inherits(WordPunctTokenizer, RegexpTokenizer)\nexports.WordPunctTokenizer = WordPunctTokenizer\n"]},"metadata":{},"sourceType":"script"}