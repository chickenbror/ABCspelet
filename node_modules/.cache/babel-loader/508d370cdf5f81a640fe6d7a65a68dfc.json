{"ast":null,"code":"/*\nCopyright (c) 2020, Johan Maupetit, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict'; // Integration with natural\n\nvar _toConsumableArray = require(\"C:/CodingProjects/ABCspelet/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"C:/CodingProjects/ABCspelet/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar Stemmer = require('../stemmer_fr');\n\nvar CarryStemmer = new Stemmer();\n\nvar stepConfs = require('./stepConfs');\n\nvar _require = require('./utils'),\n    pipe = _require.pipe;\n\nvar defaultConf = {\n  steps: stepConfs,\n  vowels: /[aeiouäâàéèëêïîöôùüûœ]/i\n}; // count number of vowel-consonant groups\n\nvar getWordSize = function getWordSize(word) {\n  var isPrevVowel = false;\n  var nbVCgroups = 0;\n\n  for (var i = 0; i < word.length; i += 1) {\n    var letter = word[i];\n    var isVowel = defaultConf.vowels.test(letter);\n\n    if (!isVowel && isPrevVowel) {\n      nbVCgroups += 1;\n    }\n\n    isPrevVowel = isVowel;\n  }\n\n  return nbVCgroups;\n};\n\nvar tranform = function tranform(word, stepConf) {\n  var newWord = null;\n\n  for (var suffixLength = word.length - 1; suffixLength > 0 && !newWord; suffixLength -= 1) {\n    var suffix = word.substr(-suffixLength);\n    var baseWord = word.substr(0, word.length - suffixLength);\n\n    for (var minRadixSize = 0; minRadixSize <= 1 && !newWord; minRadixSize += 1) {\n      var transformations = stepConf[minRadixSize] || {};\n      var newSuffix = transformations[suffix];\n\n      if (newSuffix === undefined) {\n        continue;\n      }\n\n      var candidate = \"\".concat(baseWord).concat(newSuffix);\n\n      if (getWordSize(candidate) > minRadixSize) {\n        newWord = candidate;\n        break;\n      }\n    }\n  }\n\n  return newWord || word;\n};\n\nfunction NodeCarry() {\n  var userConf = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultConf;\n\n  var conf = _objectSpread(_objectSpread({}, defaultConf), userConf);\n\n  this.steps = [0, 1, 2].map(function (iStep) {\n    return function (word) {\n      return tranform(word, conf.steps[iStep]);\n    };\n  });\n  this.stem = pipe.apply(void 0, _toConsumableArray(this.steps));\n}\n\n; // Create a Carry stemmer\n\nvar nodeCarry = new NodeCarry(); // Attach the Carry stemmer to natural's generic stemmer\n\nCarryStemmer.stem = nodeCarry.stem;\nmodule.exports = CarryStemmer;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/stemmers/Carry/index.js"],"names":["Stemmer","require","CarryStemmer","stepConfs","pipe","defaultConf","steps","vowels","getWordSize","word","isPrevVowel","nbVCgroups","i","length","letter","isVowel","test","tranform","stepConf","newWord","suffixLength","suffix","substr","baseWord","minRadixSize","transformations","newSuffix","undefined","candidate","NodeCarry","userConf","conf","map","iStep","stem","nodeCarry","module","exports"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2020, Johan Maupetit, Hugo W.L. ter Doest\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\n// Integration with natural\nconst Stemmer = require('../stemmer_fr')\nconst CarryStemmer = new Stemmer()\n\nconst stepConfs = require('./stepConfs')\nconst { pipe } = require('./utils')\n\nconst defaultConf = {\n  steps: stepConfs,\n  vowels: /[aeiouäâàéèëêïîöôùüûœ]/i\n}\n\n// count number of vowel-consonant groups\nconst getWordSize = (word) => {\n  let isPrevVowel = false\n  let nbVCgroups = 0\n\n  for (let i = 0; i < word.length; i += 1) {\n    const letter = word[i]\n    const isVowel = defaultConf.vowels.test(letter)\n\n    if (!isVowel && isPrevVowel) {\n      nbVCgroups += 1\n    }\n\n    isPrevVowel = isVowel\n  }\n\n  return nbVCgroups\n}\n\nconst tranform = (word, stepConf) => {\n  let newWord = null\n\n  for (\n    let suffixLength = word.length - 1;\n    suffixLength > 0 && !newWord;\n    suffixLength -= 1\n  ) {\n    const suffix = word.substr(-suffixLength)\n    const baseWord = word.substr(0, word.length - suffixLength)\n\n    for (\n      let minRadixSize = 0;\n      minRadixSize <= 1 && !newWord;\n      minRadixSize += 1\n    ) {\n      const transformations = stepConf[minRadixSize] || {}\n      const newSuffix = transformations[suffix]\n\n      if (newSuffix === undefined) {\n        continue\n      }\n\n      const candidate = `${baseWord}${newSuffix}`\n\n      if (getWordSize(candidate) > minRadixSize) {\n        newWord = candidate\n        break\n      }\n    }\n  }\n\n  return newWord || word\n}\n\nfunction NodeCarry (userConf = defaultConf) {\n  const conf = {\n    ...defaultConf,\n    ...userConf\n  }\n\n  this.steps = [0, 1, 2]\n    .map((iStep) => (word) => tranform(word, conf.steps[iStep]))\n\n  this.stem = pipe(...this.steps)\n};\n\n// Create a Carry stemmer\nconst nodeCarry = new NodeCarry()\n// Attach the Carry stemmer to natural's generic stemmer\nCarryStemmer.stem = nodeCarry.stem\nmodule.exports = CarryStemmer\n"]},"metadata":{},"sourceType":"script"}