{"ast":null,"code":"/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function _class(expectation) {\n      var escapedParts = \"\",\n          i;\n\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any(expectation) {\n      return \"any character\";\n    },\n    end: function end(expectation) {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i,\n        j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n      peg$startRuleFunctions = {\n    Sentences: peg$parseSentences\n  },\n      peg$startRuleFunction = peg$parseSentences,\n      peg$c0 = function peg$c0(sentences) {\n    //return sentences\n    return sentences.map(function (sent) {\n      //if (sent[1]) {\n      sent[0].push(sent[1]); //}\n\n      return sent[0].reduce(function (accu, str) {\n        return accu + str;\n      }).trim();\n    });\n  },\n      peg$c1 = function peg$c1(seqs, end) {\n    var res = seqs.reduce(function (accu, seq) {\n      return accu.concat(seq);\n    });\n    res.push(end);\n    return res;\n  },\n      peg$c2 = function peg$c2(tokens) {\n    var result = tokens.map(function (pair) {\n      return pair[0] + pair[1];\n    });\n    return result;\n  },\n      peg$c3 = function peg$c3(open, tokens, end, close) {\n    var result = tokens.map(function (pair) {\n      return pair[0] + pair[1];\n    });\n    result.unshift(open);\n    result.push(end);\n    result.push(close);\n    return result;\n  },\n      peg$c4 = /^[ \\t\\n\\r.?!]/,\n      peg$c5 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \".\", \"?\", \"!\"], false, false),\n      peg$c6 = function peg$c6() {\n    return text();\n  },\n      peg$c7 = /^[ \\t\\n\\r]/,\n      peg$c8 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c9 = function peg$c9(t) {\n    return t;\n  },\n      peg$c10 = /^[^ \\t\\n\\r!?([}\"`)\\]}\"`0-9@]/,\n      peg$c11 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \"(\", \"[\", \"}\", \"\\\"\", \"`\", \")\", \"]\", \"}\", \"\\\"\", \"`\", [\"0\", \"9\"], \"@\"], true, false),\n      peg$c12 = function peg$c12(word) {\n    var tmp = word.reduce(function (accu, elt) {\n      return accu + elt;\n    });\n    return knownAbbreviations.indexOf(tmp) > -1;\n  },\n      peg$c13 = function peg$c13(word) {\n    return text();\n  },\n      peg$c14 = /^[^ \\t\\n\\r!?.([}\"`)\\]}\"`0-9@]/,\n      peg$c15 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \".\", \"(\", \"[\", \"}\", \"\\\"\", \"`\", \")\", \"]\", \"}\", \"\\\"\", \"`\", [\"0\", \"9\"], \"@\"], true, false),\n      peg$c16 = function peg$c16() {\n    return text();\n  },\n      peg$c17 = /^[0-9]/,\n      peg$c18 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c19 = peg$anyExpectation(),\n      peg$c20 = /^[a-z]/,\n      peg$c21 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n      peg$c22 = /^[@]/,\n      peg$c23 = peg$classExpectation([\"@\"], false, false),\n      peg$c24 = /^[.]/,\n      peg$c25 = peg$classExpectation([\".\"], false, false),\n      peg$c26 = \"http://\",\n      peg$c27 = peg$literalExpectation(\"http://\", false),\n      peg$c28 = \"https://\",\n      peg$c29 = peg$literalExpectation(\"https://\", false),\n      peg$c30 = /^[a-z0-9]/,\n      peg$c31 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"]], false, false),\n      peg$c32 = /^[\\/]/,\n      peg$c33 = peg$classExpectation([\"/\"], false, false),\n      peg$c34 = function peg$c34() {\n    return text();\n  },\n      peg$c35 = /^[([}\"'`\\u2018]/,\n      peg$c36 = peg$classExpectation([\"(\", \"[\", \"}\", \"\\\"\", \"'\", \"`\", \"\\u2018\"], false, false),\n      peg$c37 = /^[)\\]}\"'`\\u2019]/,\n      peg$c38 = peg$classExpectation([\")\", \"]\", \"}\", \"\\\"\", \"'\", \"`\", \"\\u2019\"], false, false),\n      peg$currPos = 0,\n      peg$savedPos = 0,\n      peg$posDetailsCache = [{\n    line: 1,\n    column: 1\n  }],\n      peg$maxFailPos = 0,\n      peg$maxFailExpected = [],\n      peg$silentFails = 0,\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n        p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n\n  function peg$parseSentences() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseSentence();\n\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      s3 = peg$parseSentence();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseWhitespace();\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseSentence() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseTokenSeq();\n\n    if (s2 === peg$FAILED) {\n      s2 = peg$parseQuotedTokenSeq();\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseTokenSeq();\n\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseQuotedTokenSeq();\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEndOfSentence();\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseTokenSeq() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseToken();\n\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseToken();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c2(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseQuotedTokenSeq() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = peg$parseOpenSymbol();\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseToken();\n\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseWhitespace();\n\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseToken();\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWhitespace();\n\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEndOfSentence();\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseCloseSymbol();\n\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c3(s1, s2, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEndOfSentence() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c4.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c5);\n      }\n    }\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n\n      if (peg$c4.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c5);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseWhitespace() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c7.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c8);\n      }\n    }\n\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n\n      if (peg$c7.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c8);\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseToken() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parseURI();\n\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseEmail();\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseNumber();\n\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseAbbreviation();\n\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWord();\n          }\n        }\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c9(s1);\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseAbbreviation() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c10.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c11);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c10.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c11);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c12(s1);\n\n      if (s2) {\n        s2 = void 0;\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseWord() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c14.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c15);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c14.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c15);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c16();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2, s3, s4, s5;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c17.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c18);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c17.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c18);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n\n      if (input.length > peg$currPos) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c19);\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n\n        if (peg$c17.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c18);\n          }\n        }\n\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n\n            if (peg$c17.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c18);\n              }\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseCloseSymbol();\n\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c6();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEmail() {\n    var s0, s1, s2, s3, s4, s5, s6;\n    s0 = peg$currPos;\n    s1 = [];\n\n    if (peg$c20.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c21);\n      }\n    }\n\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n\n        if (peg$c20.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c21);\n          }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n\n    if (s1 !== peg$FAILED) {\n      if (peg$c22.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c23);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n\n        if (peg$c20.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c21);\n          }\n        }\n\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n\n            if (peg$c20.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c21);\n              }\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n\n        if (s3 !== peg$FAILED) {\n          if (peg$c24.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c25);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n\n            if (peg$c20.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c21);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n\n                if (peg$c20.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c21);\n                  }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c6();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseURI() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n    s0 = peg$currPos;\n\n    if (input.substr(peg$currPos, 7) === peg$c26) {\n      s1 = peg$c26;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c27);\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 8) === peg$c28) {\n        s1 = peg$c28;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c29);\n        }\n      }\n    }\n\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n\n      if (peg$c30.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c31);\n        }\n      }\n\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n\n          if (peg$c30.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c31);\n            }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        if (peg$c24.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c25);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = [];\n\n          if (peg$c30.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c31);\n            }\n          }\n\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n\n              if (peg$c30.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c31);\n                }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n\n          if (s5 !== peg$FAILED) {\n            if (peg$c24.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c25);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n\n            if (peg$c30.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c31);\n              }\n            }\n\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n\n                if (peg$c30.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c31);\n                  }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = [];\n\n              if (peg$c30.test(input.charAt(peg$currPos))) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c31);\n                }\n              }\n\n              if (s9 !== peg$FAILED) {\n                while (s9 !== peg$FAILED) {\n                  s8.push(s9);\n\n                  if (peg$c30.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c31);\n                    }\n                  }\n                }\n              } else {\n                s8 = peg$FAILED;\n              }\n\n              if (s8 !== peg$FAILED) {\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c33);\n                  }\n                }\n\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = [];\n\n                if (peg$c30.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c31);\n                  }\n                }\n\n                if (s9 !== peg$FAILED) {\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n\n                    if (peg$c30.test(input.charAt(peg$currPos))) {\n                      s9 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c31);\n                      }\n                    }\n                  }\n                } else {\n                  s8 = peg$FAILED;\n                }\n\n                if (s8 !== peg$FAILED) {\n                  if (peg$c32.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c33);\n                    }\n                  }\n\n                  if (s9 !== peg$FAILED) {\n                    s8 = [s8, s9];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c34();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOpenSymbol() {\n    var s0, s1;\n    s0 = peg$currPos;\n\n    if (peg$c35.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c36);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  function peg$parseCloseSymbol() {\n    var s0, s1;\n    s0 = peg$currPos;\n\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c38);\n      }\n    }\n\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n\n    s0 = s1;\n    return s0;\n  }\n\n  var knownAbbreviations = require(\"../util/abbreviations_en\").knownAbbreviations;\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/tokenizers/parser_sentence_tokenizer.js"],"names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","i","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","Sentences","peg$parseSentences","peg$startRuleFunction","peg$c0","sentences","map","sent","push","reduce","accu","str","trim","peg$c1","seqs","res","seq","concat","peg$c2","tokens","result","pair","peg$c3","open","close","unshift","peg$c4","peg$c5","peg$classExpectation","peg$c6","peg$c7","peg$c8","peg$c9","t","peg$c10","peg$c11","peg$c12","word","tmp","elt","knownAbbreviations","indexOf","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","peg$c18","peg$c19","peg$anyExpectation","peg$c20","peg$c21","peg$c22","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","peg$literalExpectation","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$c35","peg$c36","peg$c37","peg$c38","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildStructuredError","peg$otherExpectation","error","peg$buildSimpleError","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","s0","s1","s2","s3","s4","peg$parseSentence","peg$parseWhitespace","peg$parseTokenSeq","peg$parseQuotedTokenSeq","peg$parseEndOfSentence","peg$parseToken","s5","peg$parseOpenSymbol","peg$parseCloseSymbol","test","charAt","peg$parseURI","peg$parseEmail","peg$parseNumber","peg$parseAbbreviation","peg$parseWord","s6","s7","s8","s9","substr","require","module","exports","SyntaxError","parse"],"mappings":"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","sourcesContent":["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { Sentences: peg$parseSentences },\n      peg$startRuleFunction  = peg$parseSentences,\n\n      peg$c0 = function(sentences) {\n            //return sentences\n            return(\n                sentences.map(sent => {\n                \t//if (sent[1]) {\n                \t  sent[0].push(sent[1])\n                  //}\n                  return sent[0].reduce((accu, str) =>  accu + str).trim()\n                })\n            )\n          },\n      peg$c1 = function(seqs, end) {\n            let res = seqs.reduce((accu, seq) => accu.concat(seq))\n            res.push(end)\n            return res\n          },\n      peg$c2 = function(tokens) {\n             let result = tokens.map(pair => pair[0] + pair[1])\n             return result\n           },\n      peg$c3 = function(open, tokens, end, close) {\n        \t  let result = tokens.map(pair => pair[0] + pair[1])\n            result.unshift(open)\n            result.push(end)\n            result.push(close)\n            return result\n          },\n      peg$c4 = /^[ \\t\\n\\r.?!]/,\n      peg$c5 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \".\", \"?\", \"!\"], false, false),\n      peg$c6 = function() {\n            return text()\n          },\n      peg$c7 = /^[ \\t\\n\\r]/,\n      peg$c8 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c9 = function(t) {\n            return t\n          },\n      peg$c10 = /^[^ \\t\\n\\r!?([}\"`)\\]}\"`0-9@]/,\n      peg$c11 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \"(\", \"[\", \"}\", \"\\\"\", \"`\", \")\", \"]\", \"}\", \"\\\"\", \"`\", [\"0\", \"9\"], \"@\"], true, false),\n      peg$c12 = function(word) {\n              const tmp = word.reduce((accu, elt) => accu + elt)\n              return knownAbbreviations.indexOf(tmp) > -1},\n      peg$c13 = function(word) {\n          \treturn text()\n          },\n      peg$c14 = /^[^ \\t\\n\\r!?.([}\"`)\\]}\"`0-9@]/,\n      peg$c15 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\", \"!\", \"?\", \".\", \"(\", \"[\", \"}\", \"\\\"\", \"`\", \")\", \"]\", \"}\", \"\\\"\", \"`\", [\"0\", \"9\"], \"@\"], true, false),\n      peg$c16 = function() {\n        \t  return text()\n          },\n      peg$c17 = /^[0-9]/,\n      peg$c18 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c19 = peg$anyExpectation(),\n      peg$c20 = /^[a-z]/,\n      peg$c21 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n      peg$c22 = /^[@]/,\n      peg$c23 = peg$classExpectation([\"@\"], false, false),\n      peg$c24 = /^[.]/,\n      peg$c25 = peg$classExpectation([\".\"], false, false),\n      peg$c26 = \"http://\",\n      peg$c27 = peg$literalExpectation(\"http://\", false),\n      peg$c28 = \"https://\",\n      peg$c29 = peg$literalExpectation(\"https://\", false),\n      peg$c30 = /^[a-z0-9]/,\n      peg$c31 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"]], false, false),\n      peg$c32 = /^[\\/]/,\n      peg$c33 = peg$classExpectation([\"/\"], false, false),\n      peg$c34 = function() {\n          return text()\n        },\n      peg$c35 = /^[([}\"'`\\u2018]/,\n      peg$c36 = peg$classExpectation([\"(\", \"[\", \"}\", \"\\\"\", \"'\", \"`\", \"\\u2018\"], false, false),\n      peg$c37 = /^[)\\]}\"'`\\u2019]/,\n      peg$c38 = peg$classExpectation([\")\", \"]\", \"}\", \"\\\"\", \"'\", \"`\", \"\\u2019\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseSentences() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseSentence();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      s3 = peg$parseSentence();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseWhitespace();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c0(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseSentence() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parseTokenSeq();\n    if (s2 === peg$FAILED) {\n      s2 = peg$parseQuotedTokenSeq();\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parseTokenSeq();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parseQuotedTokenSeq();\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseEndOfSentence();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseTokenSeq() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parseToken();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseWhitespace();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parseToken();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseWhitespace();\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c2(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseQuotedTokenSeq() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOpenSymbol();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseToken();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseWhitespace();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parseToken();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseWhitespace();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseEndOfSentence();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseCloseSymbol();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c3(s1, s2, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEndOfSentence() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c4.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (peg$c4.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c5); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseWhitespace() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c7.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c8); }\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      if (peg$c7.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c8); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseToken() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseURI();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseEmail();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseNumber();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseAbbreviation();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWord();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c9(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseAbbreviation() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c10.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c11); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c10.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c11); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c12(s1);\n      if (s2) {\n        s2 = void 0;\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c13(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseWord() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c14.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c15); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c14.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c16();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseNumber() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c17.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c18); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c17.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c18); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      if (input.length > peg$currPos) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = [];\n        if (peg$c17.test(input.charAt(peg$currPos))) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c18); }\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            if (peg$c17.test(input.charAt(peg$currPos))) {\n              s5 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c18); }\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseCloseSymbol();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c6();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseEmail() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c20.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c20.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c21); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c22.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c20.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c21); }\n        }\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c20.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c21); }\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          if (peg$c24.test(input.charAt(peg$currPos))) {\n            s4 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c20.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c21); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c20.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c6();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseURI() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7) === peg$c26) {\n      s1 = peg$c26;\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c27); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 8) === peg$c28) {\n        s1 = peg$c28;\n        peg$currPos += 8;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c30.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c30.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c31); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (peg$c24.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c25); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          s5 = [];\n          if (peg$c30.test(input.charAt(peg$currPos))) {\n            s6 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s6 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c31); }\n          }\n          if (s6 !== peg$FAILED) {\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              if (peg$c30.test(input.charAt(peg$currPos))) {\n                s6 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c31); }\n              }\n            }\n          } else {\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            if (peg$c24.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c30.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c31); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c30.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = [];\n              if (peg$c30.test(input.charAt(peg$currPos))) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c31); }\n              }\n              if (s9 !== peg$FAILED) {\n                while (s9 !== peg$FAILED) {\n                  s8.push(s9);\n                  if (peg$c30.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                  }\n                }\n              } else {\n                s8 = peg$FAILED;\n              }\n              if (s8 !== peg$FAILED) {\n                if (peg$c32.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                }\n                if (s9 !== peg$FAILED) {\n                  s8 = [s8, s9];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = [];\n                if (peg$c30.test(input.charAt(peg$currPos))) {\n                  s9 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s9 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                }\n                if (s9 !== peg$FAILED) {\n                  while (s9 !== peg$FAILED) {\n                    s8.push(s9);\n                    if (peg$c30.test(input.charAt(peg$currPos))) {\n                      s9 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n                    }\n                  }\n                } else {\n                  s8 = peg$FAILED;\n                }\n                if (s8 !== peg$FAILED) {\n                  if (peg$c32.test(input.charAt(peg$currPos))) {\n                    s9 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s9 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c33); }\n                  }\n                  if (s9 !== peg$FAILED) {\n                    s8 = [s8, s9];\n                    s7 = s8;\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c34();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOpenSymbol() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (peg$c35.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseCloseSymbol() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c38); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c6();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\n  \tconst knownAbbreviations = require(\"../util/abbreviations_en\").knownAbbreviations\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"]},"metadata":{},"sourceType":"script"}