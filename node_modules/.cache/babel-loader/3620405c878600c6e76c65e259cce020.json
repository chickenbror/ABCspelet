{"ast":null,"code":"/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n\nvar SingularPluralInflector = require('./singular_plural_inflector');\n\nvar util = require('util');\n\nvar FormSet = require('./form_set'); // Changing the prototype of a native type is bad practice\n\n/*\nfunction attach () {\n  const inflector = this\n\n  String.prototype.singularizeNoun = function () {\n    return inflector.singularize(this)\n  }\n\n  String.prototype.pluralizeNoun = function () {\n    return inflector.pluralize(this)\n  }\n}\n*/\n\n\nvar NounInflector = function NounInflector() {\n  this.ambiguous = ['bison', 'bream', 'carp', 'chassis', 'christmas', 'cod', 'corps', 'debris', 'deer', 'diabetes', 'equipment', 'elk', 'fish', 'flounder', 'gallows', 'graffiti', 'headquarters', 'herpes', 'highjinks', 'homework', 'information', 'mackerel', 'mews', 'money', 'news', 'rice', 'rabies', 'salmon', 'series', 'sheep', 'shrimp', 'species', 'swine', 'tennis', 'trout', 'tuna', 'whiting', 'wildebeest'];\n  this.customPluralForms = [];\n  this.customSingularForms = [];\n  this.singularForms = new FormSet();\n  this.pluralForms = new FormSet(); // this.attach = attach\n\n  this.addIrregular('child', 'children');\n  this.addIrregular('man', 'men');\n  this.addIrregular('person', 'people');\n  this.addIrregular('sex', 'sexes');\n  this.addIrregular('mouse', 'mice');\n  this.addIrregular('ox', 'oxen');\n  this.addIrregular('foot', 'feet');\n  this.addIrregular('tooth', 'teeth');\n  this.addIrregular('goose', 'geese');\n  this.addIrregular('ephemeris', 'ephemerides');\n  this.addIrregular('cloth', 'clothes');\n  this.addIrregular('hero', 'heroes');\n  this.addIrregular('torso', 'torsi'); // see if it is possible to unify the creation of both the singular and\n  // plural regexes or maybe even just have one list. with a complete list\n  // of rules it may only be possible for some regular forms, but worth a shot\n\n  this.pluralForms.regularForms.push([/([aeiou]y)$/i, '$1s']);\n  this.pluralForms.regularForms.push([/y$/i, 'ies']);\n  this.pluralForms.regularForms.push([/ife$/i, 'ives']);\n  this.pluralForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae']);\n  this.pluralForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul|alumn|calcul|hippopotam|macrofung|phoet|syllab|troph)us$/i, '$1i']);\n  this.pluralForms.regularForms.push([/(buffal|tomat|tornad)o$/i, '$1oes']);\n  this.pluralForms.regularForms.push([/(sis)$/i, 'ses']);\n  this.pluralForms.regularForms.push([/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices']);\n  this.pluralForms.regularForms.push([/sses$/i, 'sses']);\n  this.pluralForms.regularForms.push([/(x|ch|ss|sh|s|z)$/i, '$1es']);\n  this.pluralForms.regularForms.push([/^(?!talis|.*hu)(.*)man$/i, '$1men']);\n  this.pluralForms.regularForms.push([/(.*)/i, '$1s']);\n  this.singularForms.regularForms.push([/([^v])ies$/i, '$1y']);\n  this.singularForms.regularForms.push([/ives$/i, 'ife']);\n  this.singularForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a']);\n  this.singularForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul|alumn|calcul|hippopotam|macrofung|phoet|syllab|troph)(i)$/i, '$1us']);\n  this.singularForms.regularForms.push([/(buffal|tomat|tornad)(oes)$/i, '$1o']);\n  this.singularForms.regularForms.push([/(analy|naly|synop|parenthe|diagno|the)ses$/i, '$1sis']);\n  this.singularForms.regularForms.push([/(vert|ind|cort)(ices)$/i, '$1ex']); // our pluralizer won''t cause this form of appendix (appendicies)\n  // but we should handle it\n\n  this.singularForms.regularForms.push([/(matr|append)(ices)$/i, '$1ix']);\n  this.singularForms.regularForms.push([/(x|ch|ss|sh|s|z)es$/i, '$1']);\n  this.singularForms.regularForms.push([/men$/i, 'man']);\n  this.singularForms.regularForms.push([/ss$/i, 'ss']);\n  this.singularForms.regularForms.push([/s$/i, '']);\n\n  this.pluralize = function (token) {\n    return this.ize(token, this.pluralForms, this.customPluralForms);\n  };\n\n  this.singularize = function (token) {\n    return this.ize(token, this.singularForms, this.customSingularForms);\n  };\n};\n\nutil.inherits(NounInflector, SingularPluralInflector);\nmodule.exports = NounInflector;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/inflectors/noun_inflector.js"],"names":["SingularPluralInflector","require","util","FormSet","NounInflector","ambiguous","customPluralForms","customSingularForms","singularForms","pluralForms","addIrregular","regularForms","push","pluralize","token","ize","singularize","inherits","module","exports"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2011, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst SingularPluralInflector = require('./singular_plural_inflector')\nconst util = require('util')\nconst FormSet = require('./form_set')\n\n// Changing the prototype of a native type is bad practice\n/*\nfunction attach () {\n  const inflector = this\n\n  String.prototype.singularizeNoun = function () {\n    return inflector.singularize(this)\n  }\n\n  String.prototype.pluralizeNoun = function () {\n    return inflector.pluralize(this)\n  }\n}\n*/\n\nconst NounInflector = function () {\n  this.ambiguous = [\n    'bison', 'bream', 'carp', 'chassis', 'christmas', 'cod', 'corps', 'debris', 'deer',\n    'diabetes', 'equipment', 'elk', 'fish', 'flounder', 'gallows', 'graffiti',\n    'headquarters', 'herpes', 'highjinks', 'homework', 'information',\n    'mackerel', 'mews', 'money', 'news', 'rice', 'rabies', 'salmon', 'series',\n    'sheep', 'shrimp', 'species', 'swine', 'tennis', 'trout', 'tuna', 'whiting', 'wildebeest'\n  ]\n\n  this.customPluralForms = []\n  this.customSingularForms = []\n  this.singularForms = new FormSet()\n  this.pluralForms = new FormSet()\n\n  // this.attach = attach\n\n  this.addIrregular('child', 'children')\n  this.addIrregular('man', 'men')\n  this.addIrregular('person', 'people')\n  this.addIrregular('sex', 'sexes')\n  this.addIrregular('mouse', 'mice')\n  this.addIrregular('ox', 'oxen')\n  this.addIrregular('foot', 'feet')\n  this.addIrregular('tooth', 'teeth')\n  this.addIrregular('goose', 'geese')\n  this.addIrregular('ephemeris', 'ephemerides')\n  this.addIrregular('cloth', 'clothes')\n  this.addIrregular('hero', 'heroes')\n  this.addIrregular('torso', 'torsi')\n\n  // see if it is possible to unify the creation of both the singular and\n  // plural regexes or maybe even just have one list. with a complete list\n  // of rules it may only be possible for some regular forms, but worth a shot\n  this.pluralForms.regularForms.push([/([aeiou]y)$/i, '$1s'])\n  this.pluralForms.regularForms.push([/y$/i, 'ies'])\n  this.pluralForms.regularForms.push([/ife$/i, 'ives'])\n  this.pluralForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)a$/i, '$1ae'])\n  this.pluralForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul|alumn|calcul|hippopotam|macrofung|phoet|syllab|troph)us$/i, '$1i'])\n  this.pluralForms.regularForms.push([/(buffal|tomat|tornad)o$/i, '$1oes'])\n  this.pluralForms.regularForms.push([/(sis)$/i, 'ses'])\n  this.pluralForms.regularForms.push([/(matr|vert|ind|cort)(ix|ex)$/i, '$1ices'])\n  this.pluralForms.regularForms.push([/sses$/i, 'sses'])\n  this.pluralForms.regularForms.push([/(x|ch|ss|sh|s|z)$/i, '$1es'])\n  this.pluralForms.regularForms.push([/^(?!talis|.*hu)(.*)man$/i, '$1men'])\n  this.pluralForms.regularForms.push([/(.*)/i, '$1s'])\n\n  this.singularForms.regularForms.push([/([^v])ies$/i, '$1y'])\n  this.singularForms.regularForms.push([/ives$/i, 'ife'])\n  this.singularForms.regularForms.push([/(antenn|formul|nebul|vertebr|vit)ae$/i, '$1a'])\n  this.singularForms.regularForms.push([/(octop|vir|radi|nucle|fung|cact|stimul|alumn|calcul|hippopotam|macrofung|phoet|syllab|troph)(i)$/i, '$1us'])\n  this.singularForms.regularForms.push([/(buffal|tomat|tornad)(oes)$/i, '$1o'])\n  this.singularForms.regularForms.push([/(analy|naly|synop|parenthe|diagno|the)ses$/i, '$1sis'])\n  this.singularForms.regularForms.push([/(vert|ind|cort)(ices)$/i, '$1ex'])\n  // our pluralizer won''t cause this form of appendix (appendicies)\n  // but we should handle it\n  this.singularForms.regularForms.push([/(matr|append)(ices)$/i, '$1ix'])\n  this.singularForms.regularForms.push([/(x|ch|ss|sh|s|z)es$/i, '$1'])\n  this.singularForms.regularForms.push([/men$/i, 'man'])\n  this.singularForms.regularForms.push([/ss$/i, 'ss'])\n  this.singularForms.regularForms.push([/s$/i, ''])\n\n  this.pluralize = function (token) {\n    return this.ize(token, this.pluralForms, this.customPluralForms)\n  }\n\n  this.singularize = function (token) {\n    return this.ize(token, this.singularForms, this.customSingularForms)\n  }\n}\n\nutil.inherits(NounInflector, SingularPluralInflector)\n\nmodule.exports = NounInflector\n"]},"metadata":{},"sourceType":"script"}