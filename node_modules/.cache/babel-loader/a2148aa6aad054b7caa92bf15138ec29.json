{"ast":null,"code":"/*\n   Set of transformation rules\n   Copyright (C) 2019 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n'use strict ';\n\nvar TFParser = require('./TF_Parser');\n\nvar dutchRuleSet = require('../data/Dutch/brill_CONTEXTRULES.json');\n\nvar englishRuleSet = require('../data/English/tr_from_posjs.json');\n\nvar DEBUG = false; // Constructor takes a language abbreviation and loads the right rule set\n\nfunction RuleSet(language) {\n  var data = englishRuleSet;\n  DEBUG && console.log(data);\n\n  switch (language) {\n    case 'EN':\n      data = englishRuleSet;\n      break;\n\n    case 'DU':\n      data = dutchRuleSet;\n      break;\n  }\n\n  if (data.rules) {\n    this.rules = {};\n    var that = this;\n    data.rules.forEach(function (ruleString) {\n      that.addRule(TFParser.parse(ruleString));\n    });\n  }\n\n  DEBUG && console.log(this.rules);\n  DEBUG && console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + Object.keys(this.rules).length);\n}\n\nRuleSet.prototype.addRule = function (rule) {\n  // this.rules.push(rule);\n  if (!this.rules[rule.key()]) {\n    this.rules[rule.key()] = rule;\n    return true;\n  } else {\n    return false;\n  }\n};\n\nRuleSet.prototype.removeRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    delete this.rules[rule.key()];\n  }\n};\n\nRuleSet.prototype.getRules = function () {\n  var that = this;\n  return Object.keys(this.rules).map(function (key) {\n    return that.rules[key];\n  });\n};\n\nRuleSet.prototype.nrRules = function () {\n  return Object.keys(this.rules).length;\n};\n\nRuleSet.prototype.hasRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nRuleSet.prototype.prettyPrint = function () {\n  var result = '';\n  var that = this;\n  Object.keys(this.rules).forEach(function (key) {\n    var rule = that.rules[key];\n    result += rule.prettyPrint() + '\\n';\n  });\n  return result;\n};\n\nmodule.exports = RuleSet;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/brill_pos_tagger/lib/RuleSet.js"],"names":["TFParser","require","dutchRuleSet","englishRuleSet","DEBUG","RuleSet","language","data","console","log","rules","that","forEach","ruleString","addRule","parse","Object","keys","length","prototype","rule","key","removeRule","getRules","map","nrRules","hasRule","prettyPrint","result","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAxB;;AAEA,IAAMC,YAAY,GAAGD,OAAO,CAAC,uCAAD,CAA5B;;AACA,IAAME,cAAc,GAAGF,OAAO,CAAC,oCAAD,CAA9B;;AAEA,IAAMG,KAAK,GAAG,KAAd,C,CAEA;;AACA,SAASC,OAAT,CAAkBC,QAAlB,EAA4B;AAC1B,MAAIC,IAAI,GAAGJ,cAAX;AACAC,EAAAA,KAAK,IAAII,OAAO,CAACC,GAAR,CAAYF,IAAZ,CAAT;;AACA,UAAQD,QAAR;AACE,SAAK,IAAL;AACEC,MAAAA,IAAI,GAAGJ,cAAP;AACA;;AACF,SAAK,IAAL;AACEI,MAAAA,IAAI,GAAGL,YAAP;AACA;AANJ;;AAQA,MAAIK,IAAI,CAACG,KAAT,EAAgB;AACd,SAAKA,KAAL,GAAa,EAAb;AACA,QAAMC,IAAI,GAAG,IAAb;AACAJ,IAAAA,IAAI,CAACG,KAAL,CAAWE,OAAX,CAAmB,UAAUC,UAAV,EAAsB;AACvCF,MAAAA,IAAI,CAACG,OAAL,CAAad,QAAQ,CAACe,KAAT,CAAeF,UAAf,CAAb;AACD,KAFD;AAGD;;AACDT,EAAAA,KAAK,IAAII,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAjB,CAAT;AACAN,EAAAA,KAAK,IAAII,OAAO,CAACC,GAAR,CAAY,sFAAsFO,MAAM,CAACC,IAAP,CAAY,KAAKP,KAAjB,EAAwBQ,MAA1H,CAAT;AACD;;AAEDb,OAAO,CAACc,SAAR,CAAkBL,OAAlB,GAA4B,UAAUM,IAAV,EAAgB;AAC1C;AACA,MAAI,CAAC,KAAKV,KAAL,CAAWU,IAAI,CAACC,GAAL,EAAX,CAAL,EAA6B;AAC3B,SAAKX,KAAL,CAAWU,IAAI,CAACC,GAAL,EAAX,IAAyBD,IAAzB;AACA,WAAO,IAAP;AACD,GAHD,MAGO;AACL,WAAO,KAAP;AACD;AACF,CARD;;AAUAf,OAAO,CAACc,SAAR,CAAkBG,UAAlB,GAA+B,UAAUF,IAAV,EAAgB;AAC7C,MAAI,KAAKV,KAAL,CAAWU,IAAI,CAACC,GAAL,EAAX,CAAJ,EAA4B;AAC1B,WAAO,KAAKX,KAAL,CAAWU,IAAI,CAACC,GAAL,EAAX,CAAP;AACD;AACF,CAJD;;AAMAhB,OAAO,CAACc,SAAR,CAAkBI,QAAlB,GAA6B,YAAY;AACvC,MAAMZ,IAAI,GAAG,IAAb;AACA,SAAOK,MAAM,CAACC,IAAP,CAAY,KAAKP,KAAjB,EAAwBc,GAAxB,CAA4B,UAAUH,GAAV,EAAe;AAChD,WAAOV,IAAI,CAACD,KAAL,CAAWW,GAAX,CAAP;AACD,GAFM,CAAP;AAGD,CALD;;AAOAhB,OAAO,CAACc,SAAR,CAAkBM,OAAlB,GAA4B,YAAY;AACtC,SAAOT,MAAM,CAACC,IAAP,CAAY,KAAKP,KAAjB,EAAwBQ,MAA/B;AACD,CAFD;;AAIAb,OAAO,CAACc,SAAR,CAAkBO,OAAlB,GAA4B,UAAUN,IAAV,EAAgB;AAC1C,MAAI,KAAKV,KAAL,CAAWU,IAAI,CAACC,GAAL,EAAX,CAAJ,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WAAO,KAAP;AACD;AACF,CAND;;AAQAhB,OAAO,CAACc,SAAR,CAAkBQ,WAAlB,GAAgC,YAAY;AAC1C,MAAIC,MAAM,GAAG,EAAb;AACA,MAAMjB,IAAI,GAAG,IAAb;AACAK,EAAAA,MAAM,CAACC,IAAP,CAAY,KAAKP,KAAjB,EAAwBE,OAAxB,CAAgC,UAAUS,GAAV,EAAe;AAC7C,QAAMD,IAAI,GAAGT,IAAI,CAACD,KAAL,CAAWW,GAAX,CAAb;AACAO,IAAAA,MAAM,IAAIR,IAAI,CAACO,WAAL,KAAqB,IAA/B;AACD,GAHD;AAIA,SAAOC,MAAP;AACD,CARD;;AAUAC,MAAM,CAACC,OAAP,GAAiBzB,OAAjB","sourcesContent":["/*\n   Set of transformation rules\n   Copyright (C) 2019 Hugo W.L. ter Doest\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict '\n\nconst TFParser = require('./TF_Parser')\n\nconst dutchRuleSet = require('../data/Dutch/brill_CONTEXTRULES.json')\nconst englishRuleSet = require('../data/English/tr_from_posjs.json')\n\nconst DEBUG = false\n\n// Constructor takes a language abbreviation and loads the right rule set\nfunction RuleSet (language) {\n  let data = englishRuleSet\n  DEBUG && console.log(data)\n  switch (language) {\n    case 'EN':\n      data = englishRuleSet\n      break\n    case 'DU':\n      data = dutchRuleSet\n      break\n  }\n  if (data.rules) {\n    this.rules = {}\n    const that = this\n    data.rules.forEach(function (ruleString) {\n      that.addRule(TFParser.parse(ruleString))\n    })\n  }\n  DEBUG && console.log(this.rules)\n  DEBUG && console.log('Brill_POS_Tagger.read_transformation_rules: number of transformation rules read: ' + Object.keys(this.rules).length)\n}\n\nRuleSet.prototype.addRule = function (rule) {\n  // this.rules.push(rule);\n  if (!this.rules[rule.key()]) {\n    this.rules[rule.key()] = rule\n    return true\n  } else {\n    return false\n  }\n}\n\nRuleSet.prototype.removeRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    delete this.rules[rule.key()]\n  }\n}\n\nRuleSet.prototype.getRules = function () {\n  const that = this\n  return Object.keys(this.rules).map(function (key) {\n    return that.rules[key]\n  })\n}\n\nRuleSet.prototype.nrRules = function () {\n  return Object.keys(this.rules).length\n}\n\nRuleSet.prototype.hasRule = function (rule) {\n  if (this.rules[rule.key()]) {\n    return true\n  } else {\n    return false\n  }\n}\n\nRuleSet.prototype.prettyPrint = function () {\n  let result = ''\n  const that = this\n  Object.keys(this.rules).forEach(function (key) {\n    const rule = that.rules[key]\n    result += rule.prettyPrint() + '\\n'\n  })\n  return result\n}\n\nmodule.exports = RuleSet\n"]},"metadata":{},"sourceType":"script"}