{"ast":null,"code":"/*\n    Sample space of observed events\n    Copyright (C) 2018 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n'use strict';\n\nvar Context = require('./Context');\n\nvar fs = require('fs');\n\nfunction Sample(elements) {\n  this.frequencyOfContext = {};\n  this.frequency = {};\n  this.classes = [];\n\n  if (elements) {\n    this.elements = elements;\n    this.analyse();\n  } else {\n    this.elements = [];\n  }\n} // Extracts classes and frequencies\n\n\nSample.prototype.analyse = function () {\n  var that = this;\n  this.elements.forEach(function (x) {\n    if (this.classes.indexOf(x.a) === -1) {\n      this.classes.push(x.a);\n    }\n\n    if (!that.frequencyOfContext[x.b.toString()]) {\n      that.frequencyOfContext[x.b.toString()] = 0;\n    }\n\n    that.frequencyOfContext[x.b.toString()]++;\n\n    if (!that.frequency[x.toString()]) {\n      that.frequency[x.toString()] = 0;\n    }\n\n    that.frequency[x.toString()]++;\n  });\n};\n\nSample.prototype.addElement = function (x) {\n  this.elements.push(x); // Update frequencies\n\n  if (!this.frequencyOfContext[x.b.toString()]) {\n    this.frequencyOfContext[x.b.toString()] = 0;\n  }\n\n  this.frequencyOfContext[x.b.toString()]++;\n\n  if (!this.frequency[x.toString()]) {\n    this.frequency[x.toString()] = 0;\n  }\n\n  this.frequency[x.toString()]++; // Update classes\n\n  if (this.classes.indexOf(x.a) === -1) {\n    this.classes.push(x.a);\n  }\n};\n\nSample.prototype.observedProbabilityOfContext = function (context) {\n  if (this.frequencyOfContext[context.toString()]) {\n    return this.frequencyOfContext[context.toString()] / this.elements.length;\n  } else {\n    return 0;\n  }\n};\n\nSample.prototype.observedProbability = function (x) {\n  if (this.frequency[x.toString()]) {\n    return this.frequency[x.toString()] / this.elements.length;\n  } else {\n    return 0;\n  }\n};\n\nSample.prototype.size = function () {\n  return this.elements.length;\n};\n\nSample.prototype.getClasses = function () {\n  return this.classes;\n};\n\nSample.prototype.generateFeatures = function (featureSet) {\n  this.elements.forEach(function (x) {\n    x.generateFeatures(featureSet);\n  });\n};\n\nSample.prototype.save = function (filename, callback) {\n  var sample = this;\n  var data = JSON.stringify(this, null, 2);\n  fs.writeFile(filename, data, 'utf8', function (err) {\n    // console.log('Sample written')\n    if (callback) {\n      callback(err, err ? null : sample);\n    }\n  });\n}; // Loads a sample from file and revives the right classes, i.e. Sample and\n// Element classes.\n\n\nSample.prototype.load = function (filename, ElementClass, callback) {\n  fs.readFile(filename, 'utf8', function (err, data) {\n    if (!err) {\n      var sampleData = JSON.parse(data);\n      var sample = new Sample();\n      sampleData.elements.forEach(function (elementData) {\n        var elt = new ElementClass(elementData.a, new Context(elementData.b.data));\n        sample.addElement(elt);\n      });\n\n      if (!sample.frequency || !sample.frequencyOfContext) {\n        sample.analyse();\n      }\n\n      if (callback) {\n        callback(err, sample);\n      }\n    } else {\n      if (callback) {\n        callback(err);\n      }\n    }\n  });\n};\n\nmodule.exports = Sample;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/classifiers/maxent/Sample.js"],"names":["Context","require","fs","Sample","elements","frequencyOfContext","frequency","classes","analyse","prototype","that","forEach","x","indexOf","a","push","b","toString","addElement","observedProbabilityOfContext","context","length","observedProbability","size","getClasses","generateFeatures","featureSet","save","filename","callback","sample","data","JSON","stringify","writeFile","err","load","ElementClass","readFile","sampleData","parse","elementData","elt","module","exports"],"mappings":"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","sourcesContent":["/*\n    Sample space of observed events\n    Copyright (C) 2018 Hugo W.L. ter Doest\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n'use strict'\n\nconst Context = require('./Context')\n\nconst fs = require('fs')\n\nfunction Sample (elements) {\n  this.frequencyOfContext = {}\n  this.frequency = {}\n  this.classes = []\n  if (elements) {\n    this.elements = elements\n    this.analyse()\n  } else {\n    this.elements = []\n  }\n}\n\n// Extracts classes and frequencies\nSample.prototype.analyse = function () {\n  const that = this\n  this.elements.forEach(function (x) {\n    if (this.classes.indexOf(x.a) === -1) {\n      this.classes.push(x.a)\n    }\n    if (!that.frequencyOfContext[x.b.toString()]) {\n      that.frequencyOfContext[x.b.toString()] = 0\n    }\n    that.frequencyOfContext[x.b.toString()]++\n    if (!that.frequency[x.toString()]) {\n      that.frequency[x.toString()] = 0\n    }\n    that.frequency[x.toString()]++\n  })\n}\n\nSample.prototype.addElement = function (x) {\n  this.elements.push(x)\n  // Update frequencies\n  if (!this.frequencyOfContext[x.b.toString()]) {\n    this.frequencyOfContext[x.b.toString()] = 0\n  }\n  this.frequencyOfContext[x.b.toString()]++\n  if (!this.frequency[x.toString()]) {\n    this.frequency[x.toString()] = 0\n  }\n  this.frequency[x.toString()]++\n  // Update classes\n  if (this.classes.indexOf(x.a) === -1) {\n    this.classes.push(x.a)\n  }\n}\n\nSample.prototype.observedProbabilityOfContext = function (context) {\n  if (this.frequencyOfContext[context.toString()]) {\n    return this.frequencyOfContext[context.toString()] / this.elements.length\n  } else {\n    return 0\n  }\n}\n\nSample.prototype.observedProbability = function (x) {\n  if (this.frequency[x.toString()]) {\n    return this.frequency[x.toString()] / this.elements.length\n  } else {\n    return 0\n  }\n}\n\nSample.prototype.size = function () {\n  return this.elements.length\n}\n\nSample.prototype.getClasses = function () {\n  return this.classes\n}\n\nSample.prototype.generateFeatures = function (featureSet) {\n  this.elements.forEach(function (x) {\n    x.generateFeatures(featureSet)\n  })\n}\n\nSample.prototype.save = function (filename, callback) {\n  const sample = this\n  const data = JSON.stringify(this, null, 2)\n  fs.writeFile(filename, data, 'utf8', function (err) {\n    // console.log('Sample written')\n    if (callback) {\n      callback(err, err ? null : sample)\n    }\n  })\n}\n\n// Loads a sample from file and revives the right classes, i.e. Sample and\n// Element classes.\nSample.prototype.load = function (filename, ElementClass, callback) {\n  fs.readFile(filename, 'utf8', function (err, data) {\n    if (!err) {\n      const sampleData = JSON.parse(data)\n      const sample = new Sample()\n      sampleData.elements.forEach(function (elementData) {\n        const elt = new ElementClass(elementData.a, new Context(elementData.b.data))\n        sample.addElement(elt)\n      })\n      if (!sample.frequency || !sample.frequencyOfContext) {\n        sample.analyse()\n      }\n      if (callback) {\n        callback(err, sample)\n      }\n    } else {\n      if (callback) {\n        callback(err)\n      }\n    }\n  })\n}\n\nmodule.exports = Sample\n"]},"metadata":{},"sourceType":"script"}