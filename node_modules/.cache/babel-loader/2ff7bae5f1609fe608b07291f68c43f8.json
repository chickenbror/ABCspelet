{"ast":null,"code":"\"use strict\"; //A JSON object. Can be read from an external .json file\n// const quesJSON = require('./questions.json') //only works on server-end eg Node.js\n\nfunction shuffleArray(array) {\n  var curId = array.length; // There remain elements to shuffle\n\n  while (0 !== curId) {\n    // Pick a remaining element\n    var randId = Math.floor(Math.random() * curId);\n    curId -= 1; // Swap it with the current element.\n\n    var tmp = array[curId];\n    array[curId] = array[randId];\n    array[randId] = tmp;\n  }\n\n  return array;\n}\n\nexport function randomChoice(items) {\n  var choice = items[items.length * Math.random() | 0];\n  return choice;\n} //Instancicates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \n//each question object has .category & .answers (array of things in that category and begins with the letter)\n\nexport function makeNewQuestions(obj) {\n  var letter;\n  var candidates;\n  var done = false;\n\n  while (done === false) {\n    letter = randomChoice('abcdefghijklmnopqrstvvwxyzåäö');\n    candidates = obj.questions.filter(function (que) {\n      return que.answers.some(function (ans) {\n        return ans[0] === letter;\n      });\n    }); //Need at least 5 ques\n\n    if (candidates.length >= 5) {\n      done = true;\n    }\n  }\n\n  candidates.forEach(function (candidate) {\n    //Filter answer/answers that start with letter\n    candidate.answers = candidate.answers.filter(function (ans) {\n      return ans[0] === letter;\n    });\n  });\n  var ques = shuffleArray(candidates); //shuffle the order\n\n  ques = ques.slice(0, 11); //Only return max 10 ques to save memory?\n\n  return {\n    letter: letter,\n    ques: ques\n  }; //returns an object with 2 properties  \n} // let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\n// console.log(q.letter);\n// console.log(q.ques);\n//>>>Below is for testing in the browser (play with text-only)<<<\n// function game() {\n//     let playing = true;\n//     while (playing === true) {\n//         let quesObj = makeNewQuestions(quesJSON);\n//         let letter = quesObj.letter; //A random letter\n//         let ques = quesObj.ques; //5 more more question-sets (categories+answers)\n//         let tally = 0; // If incorporating with xstate, use this as context.tally...?\n//         if (tally === 0) {\n//             alert(`Your letter is ${letter.toUpperCase()}...`);\n//         }\n//         while (tally < 5) {\n//             let que = ques[ques.length - 1]; //start from the last \n//             let cat = que.category;\n//             let answers = que.answers;\n//             let userInput = prompt(`Name ${cat}...`);\n//             let reply = userInput.toLowerCase();\n//             if (answers.includes(reply)) {\n//                 alert(\"Correct!\");\n//                 tally += 1;\n//                 ques.pop(); //remove the last\n//             }\n//             else if (reply === 'hint') {\n//                 let anAns = randomChoice(answers);\n//                 //hint 3 letters\n//                 if (anAns.length >= 3) {\n//                     let hint = anAns.slice(0, 3); //first 3 letters\n//                     let rest = '-'.repeat(anAns.slice(3).length);\n//                     alert(hint + rest);\n//                 }\n//                 //in case word is too short>>hint only 1 letter\n//                 else {\n//                     let hint = anAns.slice(0); //first letter\n//                     let rest = '-'.repeat(anAns.slice(1).length);\n//                     alert(hint + rest);\n//                 }\n//             }\n//             else {\n//                 alert('Try again!');\n//             }\n//         }\n//         if (tally >= 5) {\n//             let reply = prompt('Well done! Play again?');\n//             let yesReplies = ['yes', 'okay', 'sure', 'ok'];\n//             if (yesReplies.includes(reply.toLowerCase())) {\n//                 tally = 0;\n//             }\n//             else {\n//                 alert('Ok bye!');\n//                 playing = false;\n//             }\n//         }\n//     }\n// }\n// game()\n// console.log(eligibleQues('z').length)","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/src/game_codes/game.js"],"names":["shuffleArray","array","curId","length","randId","Math","floor","random","tmp","randomChoice","items","choice","makeNewQuestions","obj","letter","candidates","done","questions","filter","que","answers","some","ans","forEach","candidate","ques","slice"],"mappings":"AAAA,a,CAEA;AACA;;AAGA,SAASA,YAAT,CAAsBC,KAAtB,EAA6B;AACzB,MAAIC,KAAK,GAAGD,KAAK,CAACE,MAAlB,CADyB,CAEzB;;AACA,SAAO,MAAMD,KAAb,EAAoB;AAChB;AACA,QAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,KAA3B,CAAb;AACAA,IAAAA,KAAK,IAAI,CAAT,CAHgB,CAIhB;;AACA,QAAIM,GAAG,GAAGP,KAAK,CAACC,KAAD,CAAf;AACAD,IAAAA,KAAK,CAACC,KAAD,CAAL,GAAeD,KAAK,CAACG,MAAD,CAApB;AACAH,IAAAA,KAAK,CAACG,MAAD,CAAL,GAAgBI,GAAhB;AACH;;AACD,SAAOP,KAAP;AACH;;AACD,OAAO,SAASQ,YAAT,CAAsBC,KAAtB,EAA6B;AAChC,MAAIC,MAAM,GAAGD,KAAK,CAACA,KAAK,CAACP,MAAN,GAAeE,IAAI,CAACE,MAAL,EAAf,GAA+B,CAAhC,CAAlB;AACA,SAAOI,MAAP;AACH,C,CAED;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BC,GAA3B,EAAiC;AACpC,MAAIC,MAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,IAAI,GAAG,KAAX;;AACA,SAAOA,IAAI,KAAK,KAAhB,EAAuB;AACnBF,IAAAA,MAAM,GAAGL,YAAY,CAAC,+BAAD,CAArB;AACAM,IAAAA,UAAU,GAAGF,GAAG,CAACI,SAAJ,CAAcC,MAAd,CAAsB,UAAAC,GAAG;AAAA,aAClCA,GAAG,CAACC,OAAJ,CAAYC,IAAZ,CACI,UAAAC,GAAG;AAAA,eAAIA,GAAG,CAAC,CAAD,CAAH,KAASR,MAAb;AAAA,OADP,CADkC;AAAA,KAAzB,CAAb,CAFmB,CAKnB;;AACA,QAAIC,UAAU,CAACZ,MAAX,IAAqB,CAAzB,EAA4B;AACxBa,MAAAA,IAAI,GAAG,IAAP;AACH;AACJ;;AACDD,EAAAA,UAAU,CAACQ,OAAX,CAAmB,UAAAC,SAAS,EAAI;AAC5B;AACAA,IAAAA,SAAS,CAACJ,OAAV,GAAoBI,SAAS,CAACJ,OAAV,CAAkBF,MAAlB,CAA0B,UAAAI,GAAG;AAAA,aAAIA,GAAG,CAAC,CAAD,CAAH,KAASR,MAAb;AAAA,KAA7B,CAApB;AACH,GAHD;AAIA,MAAIW,IAAI,GAAGzB,YAAY,CAACe,UAAD,CAAvB,CAlBoC,CAkBC;;AACrCU,EAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,CAAX,EAAa,EAAb,CAAP,CAnBoC,CAmBZ;;AACxB,SAAO;AAACZ,IAAAA,MAAM,EAANA,MAAD;AAASW,IAAAA,IAAI,EAAJA;AAAT,GAAP,CApBoC,CAoBb;AAC1B,C,CAKD;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["\"use strict\";\r\n\r\n//A JSON object. Can be read from an external .json file\r\n// const quesJSON = require('./questions.json') //only works on server-end eg Node.js\r\n\r\n\r\nfunction shuffleArray(array) {\r\n    let curId = array.length;\r\n    // There remain elements to shuffle\r\n    while (0 !== curId) {\r\n        // Pick a remaining element\r\n        let randId = Math.floor(Math.random() * curId);\r\n        curId -= 1;\r\n        // Swap it with the current element.\r\n        let tmp = array[curId];\r\n        array[curId] = array[randId];\r\n        array[randId] = tmp;\r\n    }\r\n    return array;\r\n}\r\nexport function randomChoice(items) {\r\n    let choice = items[items.length * Math.random() | 0];\r\n    return choice;\r\n}\r\n\r\n//Instancicates an object with .letter (a random letter) & .ques (array of 5+ questions objects); \r\n//each question object has .category & .answers (array of things in that category and begins with the letter)\r\nexport function makeNewQuestions( obj ) {\r\n    let letter;\r\n    let candidates;\r\n    let done = false;\r\n    while (done === false) {\r\n        letter = randomChoice('abcdefghijklmnopqrstvvwxyzåäö');\r\n        candidates = obj.questions.filter( que => \r\n            que.answers.some(\r\n                ans => ans[0]===letter ) );\r\n        //Need at least 5 ques\r\n        if (candidates.length >= 5) {\r\n            done = true;\r\n        }\r\n    }\r\n    candidates.forEach(candidate => {\r\n        //Filter answer/answers that start with letter\r\n        candidate.answers = candidate.answers.filter( ans => ans[0]===letter); \r\n    });\r\n    let ques = shuffleArray(candidates); //shuffle the order\r\n    ques = ques.slice(0,11) //Only return max 10 ques to save memory?\r\n    return {letter, ques}; //returns an object with 2 properties  \r\n}\r\n\r\n\r\n\r\n\r\n// let q = makeNewQuestions(); //q has two properties: .letter and .ques= five or more categories+answers\r\n// console.log(q.letter);\r\n// console.log(q.ques);\r\n\r\n\r\n\r\n//>>>Below is for testing in the browser (play with text-only)<<<\r\n\r\n// function game() {\r\n//     let playing = true;\r\n//     while (playing === true) {\r\n//         let quesObj = makeNewQuestions(quesJSON);\r\n//         let letter = quesObj.letter; //A random letter\r\n//         let ques = quesObj.ques; //5 more more question-sets (categories+answers)\r\n//         let tally = 0; // If incorporating with xstate, use this as context.tally...?\r\n//         if (tally === 0) {\r\n//             alert(`Your letter is ${letter.toUpperCase()}...`);\r\n//         }\r\n//         while (tally < 5) {\r\n//             let que = ques[ques.length - 1]; //start from the last \r\n//             let cat = que.category;\r\n//             let answers = que.answers;\r\n//             let userInput = prompt(`Name ${cat}...`);\r\n//             let reply = userInput.toLowerCase();\r\n//             if (answers.includes(reply)) {\r\n//                 alert(\"Correct!\");\r\n//                 tally += 1;\r\n//                 ques.pop(); //remove the last\r\n//             }\r\n//             else if (reply === 'hint') {\r\n//                 let anAns = randomChoice(answers);\r\n//                 //hint 3 letters\r\n//                 if (anAns.length >= 3) {\r\n//                     let hint = anAns.slice(0, 3); //first 3 letters\r\n//                     let rest = '-'.repeat(anAns.slice(3).length);\r\n//                     alert(hint + rest);\r\n//                 }\r\n//                 //in case word is too short>>hint only 1 letter\r\n//                 else {\r\n//                     let hint = anAns.slice(0); //first letter\r\n//                     let rest = '-'.repeat(anAns.slice(1).length);\r\n//                     alert(hint + rest);\r\n//                 }\r\n//             }\r\n//             else {\r\n//                 alert('Try again!');\r\n//             }\r\n//         }\r\n//         if (tally >= 5) {\r\n//             let reply = prompt('Well done! Play again?');\r\n//             let yesReplies = ['yes', 'okay', 'sure', 'ok'];\r\n//             if (yesReplies.includes(reply.toLowerCase())) {\r\n//                 tally = 0;\r\n//             }\r\n//             else {\r\n//                 alert('Ok bye!');\r\n//                 playing = false;\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n\r\n// game()\r\n\r\n// console.log(eligibleQues('z').length)"]},"metadata":{},"sourceType":"module"}