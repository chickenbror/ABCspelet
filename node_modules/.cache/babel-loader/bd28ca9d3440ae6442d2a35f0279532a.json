{"ast":null,"code":"/*\nCopyright (c) 2014, Lee Wenzhu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict'; // const EdgeWeightedDigraph = require('./edge_weighted_digraph')\n\nvar Topological = require('./topological');\n/**\n  *  The ShortestPathTree represents a data type for solving the\n  *  single-source shortest paths problem in edge-weighted directed\n  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.\n  *  This implementation uses a topological-sort based algorithm.\n  *  the distTo() and hasPathTo() methods take\n  *  constant time and the pathTo() method takes time proportional to the\n  *  number of edges in the longest path returned.\n  */\n\n\nvar ShortestPathTree = function ShortestPathTree(digraph, start) {\n  var _this = this;\n\n  this.edgeTo = [];\n  this.distTo = [];\n  this.distTo[start] = 0.0;\n  this.start = start;\n  this.top = new Topological(digraph);\n  this.top.order().forEach(function (vertex) {\n    _this.relaxVertex(digraph, vertex, _this);\n  });\n};\n\nShortestPathTree.prototype.relaxEdge = function (e) {\n  var distTo = this.distTo;\n  var edgeTo = this.edgeTo;\n  var v = e.from();\n  var w = e.to();\n\n  if (distTo[w] > distTo[v] + e.weight) {\n    distTo[w] = distTo[v] + e.weight;\n    edgeTo[w] = e;\n  }\n};\n/**\n * relax a vertex v in the specified digraph g\n * @param {EdgeWeightedDigraph} the apecified digraph\n * @param {Vertex} v vertex to be relaxed\n */\n\n\nShortestPathTree.prototype.relaxVertex = function (digraph, vertex, tree) {\n  var distTo = tree.distTo;\n  var edgeTo = tree.edgeTo;\n  digraph.getAdj(vertex).forEach(function (edge) {\n    var w = edge.to();\n    distTo[w] = /\\d/.test(distTo[w]) ? distTo[w] : Number.MAX_VALUE;\n    distTo[vertex] = distTo[vertex] || 0;\n\n    if (distTo[w] > distTo[vertex] + edge.weight) {\n      // in case of the result of 0.28+0.34 is 0.62000001\n      distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2));\n      edgeTo[w] = edge;\n    }\n  });\n};\n\nShortestPathTree.prototype.getDistTo = function (v) {\n  return this.distTo[v];\n};\n\nShortestPathTree.prototype.hasPathTo = function (v) {\n  var dist = this.distTo[v];\n  if (v === this.start) return false;\n  return /\\d/.test(dist) ? dist !== Number.MAX_VALUE : false;\n};\n\nShortestPathTree.prototype.pathTo = function (v) {\n  if (!this.hasPathTo(v) || v === this.start) return [];\n  var path = [];\n  var edgeTo = this.edgeTo;\n\n  for (var e = edgeTo[v]; e; e = edgeTo[e.from()]) {\n    path.push(e.to());\n  }\n\n  path.push(this.start);\n  return path.reverse();\n};\n\nmodule.exports = ShortestPathTree;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/util/shortest_path_tree.js"],"names":["Topological","require","ShortestPathTree","digraph","start","_this","edgeTo","distTo","top","order","forEach","vertex","relaxVertex","prototype","relaxEdge","e","v","from","w","to","weight","tree","getAdj","edge","test","Number","MAX_VALUE","parseFloat","toFixed","getDistTo","hasPathTo","dist","pathTo","path","push","reverse","module","exports"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Lee Wenzhu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\n// const EdgeWeightedDigraph = require('./edge_weighted_digraph')\nconst Topological = require('./topological')\n\n/**\n  *  The ShortestPathTree represents a data type for solving the\n  *  single-source shortest paths problem in edge-weighted directed\n  *  acyclic graphs (DAGs). The edge weights can be positive, negative, or zero.\n  *  This implementation uses a topological-sort based algorithm.\n  *  the distTo() and hasPathTo() methods take\n  *  constant time and the pathTo() method takes time proportional to the\n  *  number of edges in the longest path returned.\n  */\nconst ShortestPathTree = function (digraph, start) {\n  const _this = this\n  this.edgeTo = []\n  this.distTo = []\n  this.distTo[start] = 0.0\n  this.start = start\n  this.top = new Topological(digraph)\n  this.top.order().forEach(function (vertex) {\n    _this.relaxVertex(digraph, vertex, _this)\n  })\n}\n\nShortestPathTree.prototype.relaxEdge = function (e) {\n  const distTo = this.distTo\n  const edgeTo = this.edgeTo\n  const v = e.from(); const w = e.to()\n  if (distTo[w] > distTo[v] + e.weight) {\n    distTo[w] = distTo[v] + e.weight\n    edgeTo[w] = e\n  }\n}\n\n/**\n * relax a vertex v in the specified digraph g\n * @param {EdgeWeightedDigraph} the apecified digraph\n * @param {Vertex} v vertex to be relaxed\n */\nShortestPathTree.prototype.relaxVertex = function (digraph, vertex, tree) {\n  const distTo = tree.distTo\n  const edgeTo = tree.edgeTo\n  digraph.getAdj(vertex).forEach(function (edge) {\n    const w = edge.to()\n    distTo[w] = /\\d/.test(distTo[w]) ? distTo[w] : Number.MAX_VALUE\n    distTo[vertex] = distTo[vertex] || 0\n    if (distTo[w] > distTo[vertex] + edge.weight) {\n      // in case of the result of 0.28+0.34 is 0.62000001\n      distTo[w] = parseFloat((distTo[vertex] + edge.weight).toFixed(2))\n      edgeTo[w] = edge\n    }\n  })\n}\n\nShortestPathTree.prototype.getDistTo = function (v) {\n  return this.distTo[v]\n}\n\nShortestPathTree.prototype.hasPathTo = function (v) {\n  const dist = this.distTo[v]\n  if (v === this.start) return false\n  return /\\d/.test(dist) ? dist !== Number.MAX_VALUE : false\n}\n\nShortestPathTree.prototype.pathTo = function (v) {\n  if (!this.hasPathTo(v) || v === this.start) return []\n  const path = []\n  const edgeTo = this.edgeTo\n  for (let e = edgeTo[v]; e; e = edgeTo[e.from()]) {\n    path.push(e.to())\n  }\n  path.push(this.start)\n  return path.reverse()\n}\n\nmodule.exports = ShortestPathTree\n"]},"metadata":{},"sourceType":"script"}