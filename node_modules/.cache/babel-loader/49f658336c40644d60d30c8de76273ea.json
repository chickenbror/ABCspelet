{"ast":null,"code":"/*\nCopyright (c) 2012, Alexy Maslenninkov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n/*\n * Daitch-Mokotoff Soundex Coding\n *\n * The Daitch-Mokotoff Soundex System was created by Randy Daitch and Gary\n * Mokotoff of the Jewish Genealogical Society because they concluded the system\n * developed by Robert Russell in 1918, and in use today by the U.S. National\n * Archives and Records Administration (NARA) does not apply well to many Slavic\n * and Yiddish surnames.  It also includes refinements that are independent of\n * ethnic considerations.\n *\n * The rules for converting surnames into D-M Code numbers are listed below.\n * They are followed by the coding chart.\n *\n * 1. Names are coded to six digits, each digit representing a sound listed in\n * the coding chart (below).\n *\n * 2. When a name lacks enough coded sounds for six digits, use zeros to fill to\n * six digits. GOLDEN which has only four coded sounds [G-L-D-N] is coded as\n * 583600.\n *\n * 3. The letters A, E, I, O, U, J, and Y are always coded at the beginning of a\n * name as in Alpert 087930. In any other situation, they are ignored except\n * when two of them form a pair and the pair comes before a vowel, as in Breuer\n * 791900 but not Freud.\n *\n * 4. The letter H is coded at the beginning of a name, as in Haber 579000, or\n * preceding a vowel, as in Manheim 665600, otherwise it is not coded.\n *\n * 5. When adjacent sounds can combine to form a larger sound, they are given\n * the code number of the larger sound.  Mintz which is not coded MIN-T-Z but\n * MIN-TZ 664000.\n *\n * 6. When adjacent letters have the same code number, they are coded as one\n * sound, as in TOPF, which is not coded TO-P-F 377000 but TO-PF 370000.\n * Exceptions to this rule are the letter combinations MN and NM, whose letters\n * are coded separately, as in Kleinman, which is coded 586660 not 586600.\n *\n * 7. When a surname consists or more than one word, it is coded as if one word,\n * such as Ben Aron which is treated as Benaron.\n *\n * 8. Several letter and letter combinations pose the problem that they may\n * sound in one of two ways.  The letter and letter combinations CH, CK, C, J,\n * and RS are assigned two possible code numbers.\n *\n * For more info, see http://www.jewishgen.org/InfoFiles/soundex.html\n */\n\n/**\n * D-M transformation table in the form of finite-state machine.\n * Every element of the table having member with zero index represents\n * legal FSM state; every non-zero key is the transition rule.\n *\n * Every legal state comprises tree values chosen according to the position\n * of the letter combination in the word:\n *   0: start of a word;\n *   1: before a vowel;\n *   2: any other situation.\n */\n\n/* jscpd:ignore-start */\n\nvar codes = {\n  A: {\n    0: [0, -1, -1],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]],\n    U: [[0, 7, -1]]\n  },\n  B: [[7, 7, 7]],\n  C: {\n    0: [5, 5, 5],\n    Z: {\n      0: [4, 4, 4],\n      S: [[4, 4, 4]]\n    },\n    S: {\n      0: [4, 4, 4],\n      Z: [[4, 4, 4]]\n    },\n    K: [[5, 5, 5], [45, 45, 45]],\n    H: {\n      0: [5, 5, 5],\n      S: [[5, 54, 54]]\n    }\n  },\n  D: {\n    0: [3, 3, 3],\n    T: [[3, 3, 3]],\n    Z: {\n      0: [4, 4, 4],\n      H: [[4, 4, 4]],\n      S: [[4, 4, 4]]\n    },\n    S: {\n      0: [4, 4, 4],\n      H: [[4, 4, 4]],\n      Z: [[4, 4, 4]]\n    },\n    R: {\n      S: [[4, 4, 4]],\n      Z: [[4, 4, 4]]\n    }\n  },\n  E: {\n    0: [0, -1, -1],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]],\n    U: [[1, 1, -1]],\n    W: [[1, 1, -1]]\n  },\n  F: {\n    0: [7, 7, 7],\n    B: [[7, 7, 7]]\n  },\n  G: [[5, 5, 5]],\n  H: [[5, 5, -1]],\n  I: {\n    0: [0, -1, -1],\n    A: [[1, -1, -1]],\n    E: [[1, -1, -1]],\n    O: [[1, -1, -1]],\n    U: [[1, -1, -1]]\n  },\n  J: [[4, 4, 4]],\n  K: {\n    0: [5, 5, 5],\n    H: [[5, 5, 5]],\n    S: [[5, 54, 54]]\n  },\n  L: [[8, 8, 8]],\n  M: {\n    0: [6, 6, 6],\n    N: [[66, 66, 66]]\n  },\n  N: {\n    0: [6, 6, 6],\n    M: [[66, 66, 66]]\n  },\n  O: {\n    0: [0, -1, -1],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]]\n  },\n  P: {\n    0: [7, 7, 7],\n    F: [[7, 7, 7]],\n    H: [[7, 7, 7]]\n  },\n  Q: [[5, 5, 5]],\n  R: {\n    0: [9, 9, 9],\n    Z: [[94, 94, 94], [94, 94, 94]],\n    S: [[94, 94, 94], [94, 94, 94]]\n  },\n  S: {\n    0: [4, 4, 4],\n    Z: {\n      0: [4, 4, 4],\n      T: [[2, 43, 43]],\n      C: {\n        Z: [[2, 4, 4]],\n        S: [[2, 4, 4]]\n      },\n      D: [[2, 43, 43]]\n    },\n    D: [[2, 43, 43]],\n    T: {\n      0: [2, 43, 43],\n      R: {\n        Z: [[2, 4, 4]],\n        S: [[2, 4, 4]]\n      },\n      C: {\n        H: [[2, 4, 4]]\n      },\n      S: {\n        H: [[2, 4, 4]],\n        C: {\n          H: [[2, 4, 4]]\n        }\n      }\n    },\n    C: {\n      0: [2, 4, 4],\n      H: {\n        0: [4, 4, 4],\n        T: {\n          0: [2, 43, 43],\n          S: {\n            C: {\n              H: [[2, 4, 4]]\n            },\n            H: [[2, 4, 4]]\n          },\n          C: {\n            H: [[2, 4, 4]]\n          }\n        },\n        D: [[2, 43, 43]]\n      }\n    },\n    H: {\n      0: [4, 4, 4],\n      T: {\n        0: [2, 43, 43],\n        C: {\n          H: [[2, 4, 4]]\n        },\n        S: {\n          H: [[2, 4, 4]]\n        }\n      },\n      C: {\n        H: [[2, 4, 4]]\n      },\n      D: [[2, 43, 43]]\n    }\n  },\n  T: {\n    0: [3, 3, 3],\n    C: {\n      0: [4, 4, 4],\n      H: [[4, 4, 4]]\n    },\n    Z: {\n      0: [4, 4, 4],\n      S: [[4, 4, 4]]\n    },\n    S: {\n      0: [4, 4, 4],\n      Z: [[4, 4, 4]],\n      H: [[4, 4, 4]],\n      C: {\n        H: [[4, 4, 4]]\n      }\n    },\n    T: {\n      S: {\n        0: [4, 4, 4],\n        Z: [[4, 4, 4]],\n        C: {\n          H: [[4, 4, 4]]\n        }\n      },\n      C: {\n        H: [[4, 4, 4]]\n      },\n      Z: [[4, 4, 4]]\n    },\n    H: [[3, 3, 3]],\n    R: {\n      Z: [[4, 4, 4]],\n      S: [[4, 4, 4]]\n    }\n  },\n  U: {\n    0: [0, -1, -1],\n    E: [[0, -1, -1]],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]]\n  },\n  V: [[7, 7, 7]],\n  W: [[7, 7, 7]],\n  X: [[5, 54, 54]],\n  Y: [[1, -1, -1]],\n  Z: {\n    0: [4, 4, 4],\n    D: {\n      0: [2, 43, 43],\n      Z: {\n        0: [2, 4, 4],\n        H: [[2, 4, 4]]\n      }\n    },\n    H: {\n      0: [4, 4, 4],\n      D: {\n        0: [2, 43, 43],\n        Z: {\n          H: [[2, 4, 4]]\n        }\n      }\n    },\n    S: {\n      0: [4, 4, 4],\n      H: [[4, 4, 4]],\n      C: {\n        H: [[4, 4, 4]]\n      }\n    }\n  }\n};\n/* jscpd:ignore-end */\n\nfunction process(word, codeLength) {\n  codeLength = codeLength || 6;\n  word = word.toUpperCase();\n  var output = '';\n  var pos = 0;\n  var lastCode = -1;\n\n  while (pos < word.length) {\n    var substr = word.slice(pos);\n    var rules = findRules(substr);\n    var code = void 0;\n\n    if (pos === 0) {\n      // at the beginning of the word\n      code = rules.mapping[0];\n    } else if (substr[rules.length] && findRules(substr[rules.length]).mapping[0] === 0) {\n      // before a vowel\n      code = rules.mapping[1];\n    } else {\n      // any other situation\n      code = rules.mapping[2];\n    }\n\n    if (code !== -1 && code !== lastCode) output += code;\n    lastCode = code;\n    pos += rules.length;\n  }\n\n  return normalizeLength(output, codeLength);\n}\n\nfunction findRules(str) {\n  var state = codes[str[0]];\n  var legalState = state || [[-1, -1, -1]];\n  var charsInvolved = 1;\n\n  for (var offs = 1; offs < str.length; offs++) {\n    if (!state || !state[str[offs]]) break;\n    state = state[str[offs]];\n\n    if (state[0]) {\n      legalState = state;\n      charsInvolved = offs + 1;\n    }\n  }\n\n  return {\n    length: charsInvolved,\n    mapping: legalState[0]\n  };\n}\n/**\n * Pad right with zeroes or cut excess symbols to fit length\n */\n\n\nfunction normalizeLength(token, length) {\n  length = length || 6;\n\n  if (token.length < length) {\n    token += new Array(length - token.length + 1).join('0');\n  }\n\n  return token.slice(0, length);\n}\n\nvar Phonetic = require('./phonetic');\n\nvar soundex = new Phonetic();\nsoundex.process = process;\nmodule.exports = soundex;","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/phonetics/dm_soundex.js"],"names":["codes","A","I","J","Y","U","B","C","Z","S","K","H","D","T","R","E","W","F","G","O","L","M","N","P","Q","V","X","process","word","codeLength","toUpperCase","output","pos","lastCode","length","substr","slice","rules","findRules","code","mapping","normalizeLength","str","state","legalState","charsInvolved","offs","token","Array","join","Phonetic","require","soundex","module","exports"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2012, Alexy Maslenninkov\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\n/*\n * Daitch-Mokotoff Soundex Coding\n *\n * The Daitch-Mokotoff Soundex System was created by Randy Daitch and Gary\n * Mokotoff of the Jewish Genealogical Society because they concluded the system\n * developed by Robert Russell in 1918, and in use today by the U.S. National\n * Archives and Records Administration (NARA) does not apply well to many Slavic\n * and Yiddish surnames.  It also includes refinements that are independent of\n * ethnic considerations.\n *\n * The rules for converting surnames into D-M Code numbers are listed below.\n * They are followed by the coding chart.\n *\n * 1. Names are coded to six digits, each digit representing a sound listed in\n * the coding chart (below).\n *\n * 2. When a name lacks enough coded sounds for six digits, use zeros to fill to\n * six digits. GOLDEN which has only four coded sounds [G-L-D-N] is coded as\n * 583600.\n *\n * 3. The letters A, E, I, O, U, J, and Y are always coded at the beginning of a\n * name as in Alpert 087930. In any other situation, they are ignored except\n * when two of them form a pair and the pair comes before a vowel, as in Breuer\n * 791900 but not Freud.\n *\n * 4. The letter H is coded at the beginning of a name, as in Haber 579000, or\n * preceding a vowel, as in Manheim 665600, otherwise it is not coded.\n *\n * 5. When adjacent sounds can combine to form a larger sound, they are given\n * the code number of the larger sound.  Mintz which is not coded MIN-T-Z but\n * MIN-TZ 664000.\n *\n * 6. When adjacent letters have the same code number, they are coded as one\n * sound, as in TOPF, which is not coded TO-P-F 377000 but TO-PF 370000.\n * Exceptions to this rule are the letter combinations MN and NM, whose letters\n * are coded separately, as in Kleinman, which is coded 586660 not 586600.\n *\n * 7. When a surname consists or more than one word, it is coded as if one word,\n * such as Ben Aron which is treated as Benaron.\n *\n * 8. Several letter and letter combinations pose the problem that they may\n * sound in one of two ways.  The letter and letter combinations CH, CK, C, J,\n * and RS are assigned two possible code numbers.\n *\n * For more info, see http://www.jewishgen.org/InfoFiles/soundex.html\n */\n\n/**\n * D-M transformation table in the form of finite-state machine.\n * Every element of the table having member with zero index represents\n * legal FSM state; every non-zero key is the transition rule.\n *\n * Every legal state comprises tree values chosen according to the position\n * of the letter combination in the word:\n *   0: start of a word;\n *   1: before a vowel;\n *   2: any other situation.\n */\n\n/* jscpd:ignore-start */\nconst codes = {\n  A: {\n    0: [0, -1, -1],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]],\n    U: [[0, 7, -1]]\n  },\n  B: [[7, 7, 7]],\n  C: {\n    0: [5, 5, 5],\n    Z: { 0: [4, 4, 4], S: [[4, 4, 4]] },\n    S: { 0: [4, 4, 4], Z: [[4, 4, 4]] },\n    K: [[5, 5, 5], [45, 45, 45]],\n    H: { 0: [5, 5, 5], S: [[5, 54, 54]] }\n  },\n  D: {\n    0: [3, 3, 3],\n    T: [[3, 3, 3]],\n    Z: { 0: [4, 4, 4], H: [[4, 4, 4]], S: [[4, 4, 4]] },\n    S: { 0: [4, 4, 4], H: [[4, 4, 4]], Z: [[4, 4, 4]] },\n    R: { S: [[4, 4, 4]], Z: [[4, 4, 4]] }\n  },\n  E: {\n    0: [0, -1, -1],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]],\n    U: [[1, 1, -1]],\n    W: [[1, 1, -1]]\n  },\n  F: {\n    0: [7, 7, 7],\n    B: [[7, 7, 7]]\n  },\n  G: [[5, 5, 5]],\n  H: [[5, 5, -1]],\n  I: {\n    0: [0, -1, -1],\n    A: [[1, -1, -1]],\n    E: [[1, -1, -1]],\n    O: [[1, -1, -1]],\n    U: [[1, -1, -1]]\n  },\n  J: [[4, 4, 4]],\n  K: {\n    0: [5, 5, 5],\n    H: [[5, 5, 5]],\n    S: [[5, 54, 54]]\n  },\n  L: [[8, 8, 8]],\n  M: {\n    0: [6, 6, 6],\n    N: [[66, 66, 66]]\n  },\n  N: {\n    0: [6, 6, 6],\n    M: [[66, 66, 66]]\n  },\n  O: {\n    0: [0, -1, -1],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]]\n  },\n  P: {\n    0: [7, 7, 7],\n    F: [[7, 7, 7]],\n    H: [[7, 7, 7]]\n  },\n  Q: [[5, 5, 5]],\n  R: {\n    0: [9, 9, 9],\n    Z: [[94, 94, 94], [94, 94, 94]],\n    S: [[94, 94, 94], [94, 94, 94]]\n  },\n  S: {\n    0: [4, 4, 4],\n    Z: { 0: [4, 4, 4], T: [[2, 43, 43]], C: { Z: [[2, 4, 4]], S: [[2, 4, 4]] }, D: [[2, 43, 43]] },\n    D: [[2, 43, 43]],\n    T: { 0: [2, 43, 43], R: { Z: [[2, 4, 4]], S: [[2, 4, 4]] }, C: { H: [[2, 4, 4]] }, S: { H: [[2, 4, 4]], C: { H: [[2, 4, 4]] } } },\n    C: { 0: [2, 4, 4], H: { 0: [4, 4, 4], T: { 0: [2, 43, 43], S: { C: { H: [[2, 4, 4]] }, H: [[2, 4, 4]] }, C: { H: [[2, 4, 4]] } }, D: [[2, 43, 43]] } },\n    H: { 0: [4, 4, 4], T: { 0: [2, 43, 43], C: { H: [[2, 4, 4]] }, S: { H: [[2, 4, 4]] } }, C: { H: [[2, 4, 4]] }, D: [[2, 43, 43]] }\n  },\n  T: {\n    0: [3, 3, 3],\n    C: { 0: [4, 4, 4], H: [[4, 4, 4]] },\n    Z: { 0: [4, 4, 4], S: [[4, 4, 4]] },\n    S: { 0: [4, 4, 4], Z: [[4, 4, 4]], H: [[4, 4, 4]], C: { H: [[4, 4, 4]] } },\n    T: { S: { 0: [4, 4, 4], Z: [[4, 4, 4]], C: { H: [[4, 4, 4]] } }, C: { H: [[4, 4, 4]] }, Z: [[4, 4, 4]] },\n    H: [[3, 3, 3]],\n    R: { Z: [[4, 4, 4]], S: [[4, 4, 4]] }\n  },\n  U: {\n    0: [0, -1, -1],\n    E: [[0, -1, -1]],\n    I: [[0, 1, -1]],\n    J: [[0, 1, -1]],\n    Y: [[0, 1, -1]]\n  },\n  V: [[7, 7, 7]],\n  W: [[7, 7, 7]],\n  X: [[5, 54, 54]],\n  Y: [[1, -1, -1]],\n  Z: {\n    0: [4, 4, 4],\n    D: { 0: [2, 43, 43], Z: { 0: [2, 4, 4], H: [[2, 4, 4]] } },\n    H: { 0: [4, 4, 4], D: { 0: [2, 43, 43], Z: { H: [[2, 4, 4]] } } },\n    S: { 0: [4, 4, 4], H: [[4, 4, 4]], C: { H: [[4, 4, 4]] } }\n  }\n}\n/* jscpd:ignore-end */\n\nfunction process (word, codeLength) {\n  codeLength = codeLength || 6\n  word = word.toUpperCase()\n  let output = ''\n\n  let pos = 0; let lastCode = -1\n  while (pos < word.length) {\n    const substr = word.slice(pos)\n    const rules = findRules(substr)\n\n    let code\n    if (pos === 0) {\n      // at the beginning of the word\n      code = rules.mapping[0]\n    } else if (substr[rules.length] && findRules(substr[rules.length]).mapping[0] === 0) {\n      // before a vowel\n      code = rules.mapping[1]\n    } else {\n      // any other situation\n      code = rules.mapping[2]\n    }\n\n    if ((code !== -1) && (code !== lastCode)) output += code\n    lastCode = code\n    pos += rules.length\n  }\n\n  return normalizeLength(output, codeLength)\n}\n\nfunction findRules (str) {\n  let state = codes[str[0]]\n  let legalState = state || [[-1, -1, -1]]\n  let charsInvolved = 1\n\n  for (let offs = 1; offs < str.length; offs++) {\n    if (!state || !state[str[offs]]) break\n\n    state = state[str[offs]]\n    if (state[0]) {\n      legalState = state\n      charsInvolved = offs + 1\n    }\n  }\n\n  return {\n    length: charsInvolved,\n    mapping: legalState[0]\n  }\n}\n\n/**\n * Pad right with zeroes or cut excess symbols to fit length\n */\nfunction normalizeLength (token, length) {\n  length = length || 6\n  if (token.length < length) {\n    token += (new Array(length - token.length + 1)).join('0')\n  }\n  return token.slice(0, length)\n}\n\nconst Phonetic = require('./phonetic')\nconst soundex = new Phonetic()\nsoundex.process = process\nmodule.exports = soundex\n"]},"metadata":{},"sourceType":"script"}