{"ast":null,"code":"/*\nCopyright (c) 2012, Polyakov Vladimir, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n'use strict';\n\nvar Stemmer = require('./stemmer_ru');\n\nvar PorterStemmer = new Stemmer();\nmodule.exports = PorterStemmer;\n\nfunction attemptReplacePatterns(token, patterns) {\n  var replacement = null;\n  var i = 0;\n  var isReplaced = false;\n\n  while (i < patterns.length && !isReplaced) {\n    if (patterns[i][0].test(token)) {\n      replacement = token.replace(patterns[i][0], patterns[i][1]);\n      isReplaced = true;\n    }\n\n    i++;\n  }\n\n  return replacement;\n}\n\nfunction perfectiveGerund(token) {\n  var result = attemptReplacePatterns(token, [[/[ая]в(ши|шись)$/g, ''], [/(ив|ивши|ившись|ывши|ывшись|ыв)$/g, '']]);\n  return result;\n}\n\nfunction adjectival(token) {\n  var result = adjective(token);\n\n  if (result != null) {\n    var pariticipleResult = participle(result);\n    result = pariticipleResult || result;\n  }\n\n  return result;\n}\n\nfunction adjective(token) {\n  var result = attemptReplacePatterns(token, [[/(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$/g, '']]);\n  return result;\n}\n\nfunction participle(token) {\n  var result = attemptReplacePatterns(token, [[/([ая])(ем|нн|вш|ющ|щ)$/g, '$1'], [/(ивш|ывш|ующ)$/g, '']]);\n  return result;\n}\n\nfunction reflexive(token) {\n  var result = attemptReplacePatterns(token, [[/(ся|сь)$/g, '']]);\n  return result;\n}\n\nfunction verb(token) {\n  var result = attemptReplacePatterns(token, [[/([ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)$/g, '$1'], [/(ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|ит|ыт|ены|ить|ыть|ишь|ую|ю)$/g, '']]);\n  return result;\n}\n\nfunction noun(token) {\n  var result = attemptReplacePatterns(token, [[/(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$/g, '']]);\n  return result;\n}\n\nfunction superlative(token) {\n  var result = attemptReplacePatterns(token, [[/(ейш|ейше)$/g, '']]);\n  return result;\n}\n\nfunction derivational(token) {\n  var result = attemptReplacePatterns(token, [[/(ост|ость)$/g, '']]);\n  return result;\n} // perform full stemming algorithm on a single word\n\n\nPorterStemmer.stem = function (token) {\n  token = token.toLowerCase().replace(/ё/g, 'е');\n  var volwesRegexp = /^(.*?[аеиоюяуыиэ])(.*)$/g;\n  var RV = volwesRegexp.exec(token);\n\n  if (!RV || RV.length < 3) {\n    return token;\n  }\n\n  var head = RV[1];\n  RV = RV[2];\n  volwesRegexp.lastIndex = 0;\n  var R2 = volwesRegexp.exec(RV);\n  var result = perfectiveGerund(RV);\n\n  if (result === null) {\n    var resultReflexive = reflexive(RV) || RV;\n    result = adjectival(resultReflexive);\n\n    if (result === null) {\n      result = verb(resultReflexive);\n\n      if (result === null) {\n        result = noun(resultReflexive);\n\n        if (result === null) {\n          result = resultReflexive;\n        }\n      }\n    }\n  }\n\n  result = result.replace(/и$/g, '');\n  var derivationalResult = result;\n\n  if (R2 && R2[2]) {\n    derivationalResult = derivational(R2[2]);\n\n    if (derivationalResult != null) {\n      derivationalResult = derivational(result);\n    } else {\n      derivationalResult = result;\n    }\n  }\n\n  var superlativeResult = superlative(derivationalResult) || derivationalResult;\n  superlativeResult = superlativeResult.replace(/(н)н/g, '$1');\n  superlativeResult = superlativeResult.replace(/ь$/g, '');\n  return head + superlativeResult;\n};","map":{"version":3,"sources":["C:/CodingProjects/ABCspelet/node_modules/natural/lib/natural/stemmers/porter_stemmer_ru.js"],"names":["Stemmer","require","PorterStemmer","module","exports","attemptReplacePatterns","token","patterns","replacement","i","isReplaced","length","test","replace","perfectiveGerund","result","adjectival","adjective","pariticipleResult","participle","reflexive","verb","noun","superlative","derivational","stem","toLowerCase","volwesRegexp","RV","exec","head","lastIndex","R2","resultReflexive","derivationalResult","superlativeResult"],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2012, Polyakov Vladimir, Chris Umbel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n'use strict'\n\nconst Stemmer = require('./stemmer_ru')\n\nconst PorterStemmer = new Stemmer()\nmodule.exports = PorterStemmer\n\nfunction attemptReplacePatterns (token, patterns) {\n  let replacement = null\n  let i = 0; let isReplaced = false\n  while ((i < patterns.length) && !isReplaced) {\n    if (patterns[i][0].test(token)) {\n      replacement = token.replace(patterns[i][0], patterns[i][1])\n      isReplaced = true\n    }\n    i++\n  }\n  return replacement\n}\n\nfunction perfectiveGerund (token) {\n  const result = attemptReplacePatterns(token, [\n    [/[ая]в(ши|шись)$/g, ''],\n    [/(ив|ивши|ившись|ывши|ывшись|ыв)$/g, '']\n  ])\n  return result\n}\n\nfunction adjectival (token) {\n  let result = adjective(token)\n  if (result != null) {\n    const pariticipleResult = participle(result)\n    result = pariticipleResult || result\n  }\n  return result\n}\n\nfunction adjective (token) {\n  const result = attemptReplacePatterns(token, [\n    [/(ее|ие|ые|ое|ими|ыми|ей|ий|ый|ой|ем|им|ым|ом|его|ого|ему|ому|их|ых|ую|юю|ая|яя|ою|ею)$/g, '']\n  ])\n  return result\n}\n\nfunction participle (token) {\n  const result = attemptReplacePatterns(token, [\n    [/([ая])(ем|нн|вш|ющ|щ)$/g, '$1'],\n    [/(ивш|ывш|ующ)$/g, '']\n  ])\n  return result\n}\n\nfunction reflexive (token) {\n  const result = attemptReplacePatterns(token, [\n    [/(ся|сь)$/g, '']\n  ])\n  return result\n}\n\nfunction verb (token) {\n  const result = attemptReplacePatterns(token, [\n    [/([ая])(ла|на|ете|йте|ли|й|л|ем|н|ло|но|ет|ют|ны|ть|ешь|нно)$/g, '$1'],\n    [/(ила|ыла|ена|ейте|уйте|ите|или|ыли|ей|уй|ил|ыл|им|ым|ен|ило|ыло|ено|ят|ует|ит|ыт|ены|ить|ыть|ишь|ую|ю)$/g, '']\n  ])\n  return result\n}\n\nfunction noun (token) {\n  const result = attemptReplacePatterns(token, [\n    [/(а|ев|ов|ие|ье|е|иями|ями|ами|еи|ии|и|ией|ей|ой|ий|й|иям|ям|ием|ем|ам|ом|о|у|ах|иях|ях|ы|ь|ию|ью|ю|ия|ья|я)$/g, '']\n  ])\n  return result\n}\n\nfunction superlative (token) {\n  const result = attemptReplacePatterns(token, [\n    [/(ейш|ейше)$/g, '']\n  ])\n  return result\n}\n\nfunction derivational (token) {\n  const result = attemptReplacePatterns(token, [\n    [/(ост|ость)$/g, '']\n  ])\n  return result\n}\n\n// perform full stemming algorithm on a single word\nPorterStemmer.stem = function (token) {\n  token = token.toLowerCase().replace(/ё/g, 'е')\n  const volwesRegexp = /^(.*?[аеиоюяуыиэ])(.*)$/g\n  let RV = volwesRegexp.exec(token)\n  if (!RV || RV.length < 3) {\n    return token\n  }\n  const head = RV[1]\n  RV = RV[2]\n  volwesRegexp.lastIndex = 0\n  const R2 = volwesRegexp.exec(RV)\n  let result = perfectiveGerund(RV)\n  if (result === null) {\n    const resultReflexive = reflexive(RV) || RV\n    result = adjectival(resultReflexive)\n    if (result === null) {\n      result = verb(resultReflexive)\n      if (result === null) {\n        result = noun(resultReflexive)\n        if (result === null) {\n          result = resultReflexive\n        }\n      }\n    }\n  }\n  result = result.replace(/и$/g, '')\n  let derivationalResult = result\n  if (R2 && R2[2]) {\n    derivationalResult = derivational(R2[2])\n    if (derivationalResult != null) {\n      derivationalResult = derivational(result)\n    } else {\n      derivationalResult = result\n    }\n  }\n\n  let superlativeResult = superlative(derivationalResult) || derivationalResult\n\n  superlativeResult = superlativeResult.replace(/(н)н/g, '$1')\n  superlativeResult = superlativeResult.replace(/ь$/g, '')\n  return head + superlativeResult\n}\n"]},"metadata":{},"sourceType":"script"}